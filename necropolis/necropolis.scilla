scilla_version 0

library DragonZILNecropolisLib

type Error =
  | CodeNotMain
  | CodeNotZLP
  | CodeNotOwner
  | CodeNotFound

let zero_address = 0x0000000000000000000000000000000000000000
let zero256 = Uint256 0
let zero32 = Uint32 0
let two256 = Uint256 2

let f1 = Uint256 10
let f2 = Uint256 100
let f4 = Uint256 10000
let f7 = Uint256 1000000
let f6 = Uint256 10000000
let f9 = Uint256 100000000
let f11 = Uint256 10000000000
let f12 = Uint256 100000000000
let f13 = Uint256 1000000000000
let f15 = Uint256 100000000000000
let f16 = Uint256 1000000000000000
let f17 = Uint256 10000000000000000
let f18 = Uint256 100000000000000000
let f19 = Uint256 1000000000000000000
let f20 = Uint256 10000000000000000000
let f21 = Uint256 100000000000000000000
let f23 = Uint256 10000000000000000000000
let f22 = Uint256 100000000000000000000000
let f25 = Uint256 1000000000000000000000000
let f26 = Uint256 10000000000000000000000000
let f27 = Uint256 100000000000000000000000000
let f29 = Uint256 10000000000000000000000000000
let f31 = Uint256 1000000000000000000000000000000
let f33 = Uint256 100000000000000000000000000000000
let f35 = Uint256 10000000000000000000000000000000000
let f37 = Uint256 1000000000000000000000000000000000000
let f39 = Uint256 100000000000000000000000000000000000000
let f41 = Uint256 10000000000000000000000000000000000000000
let f43 = Uint256 1000000000000000000000000000000000000000000

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_address = @option_value ByStr20
let unpack_uint256 = @option_value Uint256

let get_gen =
  fun (gens: Uint256) =>
  fun (f: Uint256) =>
  fun (d: Uint256) =>
    let n0 = builtin rem gens f in
    let n1 = builtin div f d in
      builtin div n0 n1

let next_combat_gen =
  fun (sub: Uint256) =>
  fun (f: Uint256) =>
  fun (l: Uint256) =>
    let n = get_gen sub f f2 in
      builtin add n l

let next_face_gen =
  fun (sub: Uint256) =>
  fun (f: Uint256) =>
  fun (l: Uint256) =>
    let n = get_gen sub f f1 in
      builtin add n l

let calc_face_gens =
  fun (face_gens: Uint256) =>
  fun (c: Uint256) =>
    let sub = builtin rem face_gens f27 in
    let a = builtin div sub f26 in
    let h = next_face_gen sub f25 a in
    let s = next_face_gen sub f22 h in
    let sp = next_face_gen sub f20 s in
    let t = next_face_gen sub f18 sp in
    let w = next_face_gen sub f16 t in
    let b = next_face_gen sub f12 w in
    let e = next_face_gen sub f9 b in
    let he = next_face_gen sub f6 e in
    let n = builtin mul he f19 in
      builtin div n c

let calc_combat_gens =
  fun (gens: Uint256) =>
  fun (s: Uint256) =>
    let g0 = next_combat_gen gens f43 zero256 in
    let g1 = next_combat_gen gens f41 g0 in
    let g2 = next_combat_gen gens f39 g1 in
    let g3 = next_combat_gen gens f37 g2 in
    let g4 = next_combat_gen gens f35 g3 in
    let g5 = next_combat_gen gens f33 g4 in
    let g6 = next_combat_gen gens f31 g5 in
    let g7 = next_combat_gen gens f29 g6 in
    let g8 = next_combat_gen gens f27 g7 in
    let g9 = next_combat_gen gens f25 g8 in
    let g10 = next_combat_gen gens f23 g9 in
    let g11 = next_combat_gen gens f21 g10 in
    let g12 = next_combat_gen gens f19 g11 in
    let g13 = next_combat_gen gens f17 g12 in
    let g14 = next_combat_gen gens f15 g13 in
    let g15 = next_combat_gen gens f13 g14 in
    let g16 = next_combat_gen gens f11 g15 in
    let g17 = next_combat_gen gens f9 g16 in
    let g18 = next_combat_gen gens f7 g17 in
    let g19 = next_combat_gen gens f4 g18 in
    let g20 = next_combat_gen gens f2 g19 in
    let n = builtin mul g20 f19 in
      builtin div n s

let calc_gen_lab =
  fun (start_price: Uint128) =>
  fun (use_count: Uint32) =>
  fun (multiplicator: Uint128) =>
    let is_zero = builtin eq use_count zero32 in
    match is_zero with
    | True => zero256
    | False =>
      let some_m = builtin to_uint256 multiplicator in
      let some_p = builtin to_uint256 start_price in
      let m = unpack_uint256 zero256 some_m in
      let p = unpack_uint256 zero256 some_p in
      let n = builtin pow m use_count in
      let p = builtin div p two256 in
        builtin mul n p
    end

let calc_amount =
  fun (zlp_amount: Uint128) =>
  fun (nft_supply: Uint256) =>
  fun (token_id: Uint256) =>
  fun (s: Uint256) =>
    let some_zlp = builtin to_uint256 zlp_amount in
    let zlp = unpack_uint256 zero256 some_zlp in
    let token_count = builtin mul nft_supply token_id in
    let count = builtin div token_count s in
      builtin div zlp count

let calc_rewards =
  fun (supply: Uint256) =>
  fun (gen_lab: Uint256) =>
  fun (combat: Uint256) =>
  fun (face: Uint256) =>
  fun (max: Uint256) =>
    let is_max = builtin lt max supply in
    match is_max with
    | True => max
    | False =>
      let sg = builtin add supply gen_lab in
      let cf = builtin add combat face in
        builtin add sg cf
    end


let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotMain  => Int32 -1
      | CodeNotZLP   => Int32 -2
      | CodeNotOwner => Int32 -3
      | CodeNotFound => Int32 -4
      end
    in
    { _exception : "Error"; code : result_code }

contract DragonZILNecropolisContract
()

field entropy : Uint256 = Uint256 42
field breed_commission : Uint128 = Uint128 10

field waiting_list: Map Uint256 (Pair Uint128 ByStr20) = Emp Uint256 (Pair Uint128 ByStr20)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

transition TestFace(face_gens: Uint256, c: Uint256)
  value = calc_face_gens face_gens c;

  e = {
    _eventname: "Test";
    value: value
  };
  event e
end

transition TestCombat(combat_gens: Uint256, c: Uint256)
  value = calc_combat_gens combat_gens c;

  e = {
    _eventname: "Test";
    value: value
  };
  event e
end

transition TestGenLab(start_price: Uint128, use_count: Uint32, multiplicator: Uint128)
  value = calc_gen_lab start_price use_count multiplicator;

  e = {
    _eventname: "Test";
    value: value
  };
  event e
end

transition TestAmount(zlp_amount: Uint128, dmz_total_supply: Uint256, token_id: Uint256, s: Uint256)
  value = calc_amount zlp_amount dmz_total_supply token_id s;

  e = {
    _eventname: "Test";
    value: value
  };
  event e
end
