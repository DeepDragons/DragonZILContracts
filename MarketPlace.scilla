scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils

library MarketPlace

let not_pause = Uint32 0
let on_pause = Uint32 1

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
  fun (msg1 : Message) =>
  fun (msg2 : Message) =>
    let msgs_tmp = one_msg msg2 in
      Cons {Message} msg1 msgs_tmp

let one = Uint256 1

type Status =
| Pending
| Active

(*ByStr20 - Address of owner*)
(*Uint128 - Price*)
(*Uint256 - tokenID*)
(*Uint256 - orderID*)
(*Status  - Order status*)

 type Order =
| Order of ByStr20 Uint128 Uint256 Uint256 Status 

(* Error exceptions *)
type Error =
  | CodeMPnotApprovedToTransfer
  | CodeOrderWrongState
  | CodeOrderNotFound
  | CodePaymentAmountError
  | CodeNotAuthorized
  | CodeIsNotDZTContract
  | CodePauseNotPause

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeMPnotApprovedToTransfer  => Int32 -1
      | CodeOrderWrongState          => Int32 -2
      | CodeOrderNotFound            => Int32 -3
      | CodePaymentAmountError       => Int32 -4
      | CodeNotAuthorized            => Int32 -5
      | CodeIsNotDZTContract         => Int32 -6
      | CodePauseNotPause            => Int32 -7
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract MarketPlace
(contract_owner : ByStr20, main_dzt : ByStr20)

field pause: Uint32 = not_pause
(*Order IDs - use global variable to track order numbers *)
field order_id : Uint256 = Uint256 0
(* Orderbook: mapping (order_id => ( Order struct )) *)
field orderbook : Map Uint256 Order
                  = Emp Uint256 Order
(* Temp_orderbook: mapping (token_id => (Order struct)) *)
field temp_orderbook : Map Uint256 Order
                            = Emp Uint256 Order

(* Fee taken from each purchase, 1/20 or 5% of price *)
field marketplace_fee: Uint128 = Uint128 20

(* Procedures *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure CheckApproved (token_id: Uint256)
  is_approved_call = {
    _tag: "GetApproved";
    _recipient: main_dzt;
    _amount: Uint128 0;
    token_id: token_id
  };
  msgs = one_msg is_approved_call;
  send msgs
end

(* @dev Transfer the ownership of a given Dragon to another address*)
(*@param tokenID - Dragon ID*)
procedure TransferDragonToOwner (token_id: Uint256, owner: ByStr20)
  transfered = {
    _tag: "Transfer";
    _recipient: main_dzt;
    _amount: Uint128 0;
    to: owner;
    token_id: token_id
  };
  msgs = one_msg transfered;
  send msgs
end

(* @dev Transfer the ownership of a given token ID to this address*)
(*@param tokenID - address of NFT contract*)
procedure TransferDragonToMarketPlace (token_id: Uint256)
  transfered = {
    _tag: "TransferFrom";
    _recipient: main_dzt;
    _amount: Uint128 0;
    to: _this_address;
    token_id: token_id
  };
  msgs = one_msg transfered;
  send msgs
end

procedure IsContractOwner()
  is_contract_owner = builtin eq _sender contract_owner;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotAuthorized;
    ThrowError err 
  end
end

procedure IsDZTContract()
  is_zlp_sender = builtin eq main_dzt _sender;
  match is_zlp_sender with
  | True =>
  | False =>
    err = CodeIsNotDZTContract;
    ThrowError err
  end
end

procedure CheckPause (expected: Uint32)
  curent_pause <- pause;
  is_eq = builtin eq expected curent_pause;
  match is_eq with
  | True =>
  | False =>
    err = CodePauseNotPause;
    ThrowError err
  end
end

(* Create a listing and sell a Dragon*) 
(* First call from frontend. User wants to post an item for sale. They call this function *)
(* then it will check if approval is okay, if so, then it will transfer Dragon to itself, *)
(* and create the listing information and publish it as an item for sale *)
transition Sell(token_id: Uint256, price: Uint128)
  CheckPause not_pause;
  (* Create a temporary order that is pending to be used as reference in callbacks*)
  list_state  = Pending;
  current_order_id <- order_id;
  new_order = Order _sender price token_id current_order_id list_state;
  temp_orderbook[token_id] := new_order;
  new_order_id = builtin add current_order_id one;
  order_id := new_order_id;
  e = {_eventname : "PendingOrderRecorded"; extracted_order_id : current_order_id; order_info: new_order};
  event e;
   (* Check approval to see if we can transfer*)
  CheckApproved token_id
end

(*Callback Transitions*)
transition GetApprovedCallBack(approved_addr: ByStr20, token_id: Uint256)
  IsDZTContract;
  CheckPause not_pause;
  is_market_place_approved = builtin eq _this_address approved_addr;
  match is_market_place_approved with
  | False =>
    (*Not approved to transfer Dragon*)
    delete temp_orderbook[token_id];
    err = CodeMPnotApprovedToTransfer;
    ThrowError err
  | True =>
    (*Approved to transfer Dragon - call TransferFrom on main contract*)
    temp_order <- temp_orderbook[token_id];
    match temp_order with 
    | Some (Order owner price saved_token_id item_order_id list_state) => 
      match list_state with
      | Pending =>
        e = {_eventname : "DragonApprovedSuccess"; extracted_order_id : item_order_id; token_id : token_id};
        event e;
        TransferDragonToMarketPlace token_id
      | _ =>
        err = CodeOrderWrongState;
        ThrowError err
      end
    | None => 
      err = CodeOrderNotFound;
      ThrowError err
    end
  end
end

transition TransferFromSuccessCallBack(from: ByStr20, recipient: ByStr20, token_id: Uint256)
  IsDZTContract;
  CheckPause not_pause;
  temp_order <- temp_orderbook[token_id];
  match temp_order with 
  | Some (Order owner price saved_token_id item_order_id list_state) => 
    match list_state with
    | Pending =>
      (* Store listing info inside the order mappings for references *)
      new_state = Active;
      new_order = Order from price token_id item_order_id new_state;
      orderbook[item_order_id] := new_order;
      delete temp_orderbook[token_id];
      e = {_eventname : "ListOrderSuccess"; extracted_order_id : item_order_id; order: new_order};
      event e
    | _ =>
      err = CodeOrderWrongState;
      ThrowError err
    end
  | None => 
    err = CodeOrderNotFound;
    ThrowError err
  end
end

(* Purchase an order/NFT that is for sale*)     
transition Purchase(purchase_order_id: Uint256)
  CheckPause not_pause;
  listing <- orderbook[purchase_order_id];
  current_marketplace_fee <- marketplace_fee;
  match listing with
  | Some (Order owner price token_id item_order_id list_state) =>  
    match list_state with
    | Active => 
      (*Order is active! Check amount is right*)
      is_amount_correct =  uint128_ge _amount price;
      match is_amount_correct with
      | True => 
        accept;
        (* amount is correct go ahead and remove order and transfer Dragon plus funds*)
        (* remove fee from the purchase amount*)
        fees = builtin div price current_marketplace_fee;
        sellers_amount = builtin sub price fees;
        (* Delete the order from the orderbook*)
        delete orderbook[item_order_id];
        (* transfer Dragon to new owner*)
        nft_transfered = {
          _tag: "Transfer";
          _recipient: main_dzt;
          _amount: Uint128 0;
          to: _sender;
          token_id: token_id
        };
        send_payment = {
          _tag : ""; 
          _recipient : owner; 
          _amount : sellers_amount
        };
        e = { _eventname : "PurchaseSuccess"; item_order_id: item_order_id; token_id: token_id; buyer_address: _sender; seller_address : owner; price_sold : sellers_amount};
        event e;
        msgs = two_msgs nft_transfered send_payment;
        send msgs
      | False =>
        err = CodePaymentAmountError;
        ThrowError err
      end
    | _ => 
      err = CodeOrderWrongState;
      ThrowError err
    end
  | None => 
    err = CodeOrderNotFound;
    ThrowError err
  end
end




(* Cancel listing, remove it, and transfer Dragon back to owner*) 
(* Only performed by owner of listing*)
transition CancelListing(cancel_order_id : Uint256)
  listing <- orderbook[cancel_order_id];
  match listing with
  | Some (Order owner price token_id item_order_id list_state) =>  
    (*check if owner of order*)
    is_owner = builtin eq _sender owner;
    match is_owner with
    | True => 
      match list_state with
      | Active => 
        (*Order is active! Go ahead delete the order and return Dragon*)
        delete orderbook[item_order_id];
        e = {_eventname : "OrderCanceled"; extracted_order : item_order_id};
        event e;
        (*transfer Dragon to owner*)
        TransferDragonToOwner token_id owner
      | _ => 
        err = CodeOrderWrongState;
        ThrowError err
      end
    | False =>
      err = CodeNotAuthorized;
      ThrowError err
    end
  | None => 
    err = CodeOrderNotFound;
    ThrowError err
  end
end

(* Cancel an order and refund the NFT when the contract is on pause *)
transition CancelOrder(cancel_order_id: Uint256)
  CheckPause on_pause;
  listing <- orderbook[cancel_order_id];
  match listing with
  | Some (Order owner price token_id item_order_id list_state) =>
    delete orderbook[item_order_id];
    e = {_eventname : "OrderCancelled"; item_order_id : item_order_id};
    event e;
    match list_state with
    | Active => 
      TransferDragonToOwner token_id owner
    | Pending =>
    end
  | None =>
    err = CodeOrderNotFound;
    ThrowError err
  end
end



(* Admin only transitions *)

(*Withdrawal balance of contract *)
transition Withdrawal(to: ByStr20)
  IsContractOwner;
  (* get current balance *)
  bal <- _balance;
  e = {_eventname : "WithdrawBalanceSuccess"; withdrawal_amount : bal; recipient: _sender};
  event e;
  withdrawal = {_tag : ""; _recipient : to; _amount : bal};
  msgs = one_msg withdrawal;
  send msgs
end

transition ChangeMarketPlaceFee(new_fee: Uint128)
  IsContractOwner;
  old_fee <- marketplace_fee;
  marketplace_fee := new_fee;
  e = {_eventname : "FeeChanged"; previous_fee : old_fee; new_fee: new_fee};
  event e
end

transition ChangePause()
  IsContractOwner;
  status <- pause;
  is_pause = builtin eq status on_pause;
  match is_pause with
  | True =>
    pause := not_pause;
    e = {_eventname : "Working"};
    event e
  | False =>
    pause := on_pause;
    e = {_eventname : "Paused"};
    event e
  end
end

(*Empty callbacks*)
transition RecipientAcceptTransferFrom(from: ByStr20, recipient: ByStr20, token_id: Uint256)
end

transition TransferSuccessCallBack(from: ByStr20, recipient: ByStr20, token_id: Uint256)
end

