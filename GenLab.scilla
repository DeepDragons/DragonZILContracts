scilla_version 0
import ListUtils
library GenLab

let tt = True
let zero = Uint32 0
let one = Uint32 1
let two = Uint256 2
let ten = Uint256 10
let ten2 = Uint256 100
let zero256 = Uint256 0
let zero_address = 0x0000000000000000000000000000000000000000

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let unpack_uint32 = @option_value Uint32
let unpack_address = @option_value ByStr20
let unpack_uint256 = @option_value Uint256

(* Error events *)
type Error =
  | CodeImproperValue
  | CodeImproperGenNum
  | CodeNotAuthorised
  | CodeStageIncorrect

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeImproperValue      => Int32 -1
      | CodeImproperGenNum     => Int32 -2
      | CodeNotAuthorised      => Int32 -3
      | CodeStageIncorrect     => Int32 -4
      end
    in
    { _exception : "Error"; code : result_code }

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
  fun (msg1 : Message) =>
  fun (msg2 : Message) =>
    let msgs_tmp = one_msg msg2 in
    Cons {Message} msg1 msgs_tmp

let build_pair =
  fun (arg0: Uint256) =>
  fun (arg1: Uint256) =>
    Pair {Uint256 Uint256} arg0 arg1

let get_upgraded_genschain =
  fun (genschain: Uint256) =>
  fun (num: Uint256) =>
  fun (new_gen: Uint256) =>
    let pow_num = builtin mul two num in
    let pow_num2 = builtin add two pow_num in
    let pow_num1 = builtin add two pow_num2 in
    let pow_num2_32opt = builtin to_uint32 pow_num2 in
    let pow_num1_32opt = builtin to_uint32 pow_num1 in
    let pow_num2_32 = unpack_uint32 zero pow_num2_32opt in
    let pow_num1_32 = unpack_uint32 zero pow_num1_32opt in
    let divider1 = builtin pow ten pow_num1_32 in
    let divider2 = builtin pow ten pow_num2_32 in
    let rem_num1 = builtin rem genschain divider1 in
    let rem_num2 = builtin rem genschain divider2 in
    let genzeros = builtin sub rem_num1 rem_num2 in
    let genchain_pre = builtin sub genschain rem_num1 in
    let genchain_pre2 = builtin add genchain_pre rem_num2 in
    let new_genzeros = builtin mul new_gen divider2 in
      builtin add genchain_pre2 new_genzeros

contract GenLab

(
  zlp_addr:    ByStr20,
  owner:       ByStr20,
  zlp_wallet:  ByStr20,
  mainDZT: ByStr20 with contract
    field token_stage: Map Uint256 Uint32,
    field token_owners: Map Uint256 ByStr20,
    field token_gen_battle: Map Uint256 Uint256
  end,
  old: ByStr20 with contract
    field use_count: Map Uint256 Uint32
  end
)

field use_count: Map Uint256 Uint32 = Emp Uint256 Uint32
field start_price: Uint128 = Uint128 1000000000000000000
field price_multiplicator: Uint128 = Uint128 2
field zlp_wallet_address: ByStr20 = zlp_wallet
field is_migrate: Bool = False

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure checkAddress(address: ByStr20)
  is_address_call = builtin eq _sender address;
  match is_address_call with
  | False =>
    err = CodeNotAuthorised;
    ThrowError err
  | True =>
  end
end

procedure checkStage(stage: Uint32)
  is_stage_egg = builtin lt stage one;
  match is_stage_egg with
  | False =>
  | True =>
    err = CodeStageIncorrect;
    ThrowError err
  end
end

procedure checkValue(new_value: Uint256)
  is_proper_gen_num = builtin lt new_value ten2;
  match is_proper_gen_num with
  | True =>
  | False =>
    err = CodeImproperValue;
    ThrowError err
  end
end

procedure checkGenNum(gen_num: Uint256)
  twenty = Uint256 20;
  is_proper_gen_num = builtin lt gen_num twenty;
  match is_proper_gen_num with
  | True =>
  | False =>
    err = CodeImproperGenNum;
    ThrowError err
  end
end

transition ChangeGen(token_id: Uint256, gen_num: Uint256, new_value: Uint256)
  checkGenNum gen_num;
  checkValue new_value;
  some_use_count <- use_count[token_id];
  actual_use_count = unpack_uint32 zero some_use_count;
  new_use_count = builtin add actual_use_count one;
  use_count[token_id] := new_use_count;
  actual_multiplicator <- price_multiplicator;
  multiplicator = builtin pow actual_multiplicator actual_use_count;
  price <- start_price;
  zlp_wallet_addr <- zlp_wallet_address;
  amount_zlp = builtin mul price multiplicator;
  zlp_transfer = {
      _tag: "TransferFrom";
      _recipient: zlp_addr;
      _amount: Uint128 0;
      from: _sender;
      to: zlp_wallet_addr;
      amount: amount_zlp
    };
  some_stage <-& mainDZT.token_stage[token_id];
  stage = unpack_uint32 zero some_stage;
  checkStage stage;
  some_dragon_owner <-& mainDZT.token_owners[token_id];
  dragon_owner = unpack_address zero_address some_dragon_owner;
  checkAddress dragon_owner;
  some_token_gen_battle <-& mainDZT.token_gen_battle[token_id];
  token_gen_battle = unpack_uint256 zero256 some_token_gen_battle;
  new_gen = get_upgraded_genschain token_gen_battle gen_num new_value;
  id_gen_pair = build_pair token_id new_gen;
  nil_drgnpair = Nil {(Pair Uint256 Uint256)};
  id_gen_list = Cons {(Pair Uint256 Uint256)} id_gen_pair nil_drgnpair;
  changegens_call = {
      _tag: "ChangeBattleGens";
      _recipient: mainDZT;
      _amount: Uint128 0;
      id_gen_list: id_gen_list
    };
  msgs = two_msgs changegens_call zlp_transfer;
  send msgs 
end

transition ChangePrice(new_price: Uint128, new_multiplicator: Uint128)
  checkAddress owner;
  price_multiplicator := new_multiplicator;
  start_price := new_price
end

transition ChangeZLPWallet(addr: ByStr20)
  checkAddress owner;

  e = {
    _eventname: "ZLPWalletChanged";
    addr: addr
  };
  event e;

  zlp_wallet_address := addr
end

transition Migrate()
  already_maigrate <- is_migrate;
  match already_maigrate with
  | False =>
    old_use_count <-& old.use_count;
    use_count := old_use_count;
    is_migrate := tt
  | True =>
  end
end

transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

