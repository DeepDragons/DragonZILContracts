scilla_version 0

import PairUtils ListUtils
(***************************************************)
(*               Associated library                *)
(***************************************************)
library FightPlace

(* User-defined ADTs *)
type Dummy =
| Dummy

type Operation =
| Add
| Sub

(* DragonZIL types *)
(* Custom ADT storing - token_id, owner, stage, token_uri, token_gen_battle, token_gen_image *)
type Dragon =
| Dragon of Uint256 ByStr20 Uint32 String Uint256 Uint256

(* Custom ADT storing - token_id, token_gen_battle *)
type IdBattleGenPair =
| IdBattleGenPair of Uint256 Uint256
(* DragonZIL types *)

let one_drgnpair =
  fun (drgnpair : IdBattleGenPair) =>
    let nil_drgnpair = Nil {IdBattleGenPair} in
    Cons {IdBattleGenPair} drgnpair nil_drgnpair

let two_drgnpairs =
  fun (drgnpair1 : IdBattleGenPair) =>
  fun (drgnpair2 : IdBattleGenPair) =>
    let drgnpair_tmp = one_drgnpair drgnpair2 in
    Cons {IdBattleGenPair} drgnpair1 drgnpair_tmp

let zero = Uint256 0
let zero32 = Uint32 0
let one = Uint256 1
let one32 = Uint32 1
let two = Uint256 2
let eight = Uint256 8
let ten = Uint256 10
let twenty = Uint256 20
let ninetynine = Uint256 99
let ten2 = Uint256 100
let ten20 = Uint256 100000000000000000000

let verdad = Dummy
let add_operation = Add
let sub_operation = Sub

let zero_address = 0x0000000000000000000000000000000000000000
let dummy_str = ""
let default_stage = Uint32 0

let default_dragon = Dragon zero zero_address default_stage dummy_str zero zero

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_address = @option_value ByStr20
let option_str = @option_value String
let option_uint32 = @option_value Uint32
let option_uint256 = @option_value Uint256
let option_uint128 = @option_value Uint128
let option_dragon = @option_value Dragon

let build_dragon =
  fun (token_id: Uint256) =>
  fun (some_token_owner: Option ByStr20) =>
  fun (some_token_uri: Option String) =>
  fun (some_token_gen_battle: Option Uint256) =>
  fun (some_token_gen_image: Option Uint256) =>
  fun (some_token_stage: Option Uint32) =>
    let owner = option_address zero_address some_token_owner in
    let uri = option_str dummy_str some_token_uri in
    let gen_battle = option_uint256 zero some_token_gen_battle in
    let gen_image = option_uint256 zero some_token_gen_image in
    let stage = option_uint32 default_stage some_token_stage in
      Dragon token_id owner stage uri gen_battle gen_image

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let one_listid =
  fun (id : Uint256) =>
    let nil_listid = Nil {Uint256} in
    Cons {Uint256} id nil_listid

let two_listid =
  fun (id1 : Uint256) =>
  fun (id2 : Uint256) =>
    let listid_tmp = one_listid id2 in
    Cons {Uint256} id1 listid_tmp

(* todo *)
(* Error events *)
type Error =
  | CodeNotAuthorised
  | CodeNoPubKey
  | CodeVerificationFailed
  | CodeUint32Overflow
  | CodeNotInWaitingList
  | CodeSameDragon
  | CodeNotAnOwner

let random =
  fun (entropy: Uint256) =>
  fun (block_number: BNum) =>
    let entropy_hash = builtin keccak256hash entropy in
    let blockhash = builtin keccak256hash block_number in
    let ehash = builtin concat entropy_hash blockhash in
    let hash = builtin keccak256hash ehash in
      builtin to_uint256 hash

let get_gen_val =
  fun (genschain: Uint256) =>
  fun (num: Uint256) =>
    let pow_num2 = builtin mul two num in
    let pow_num1 = builtin add two pow_num2 in
    let pow_num2_32opt = builtin to_uint32 pow_num2 in
    let pow_num1_32opt = builtin to_uint32 pow_num1 in
    let pow_num2_32 = option_uint32 zero32 pow_num2_32opt in
    let pow_num1_32 = option_uint32 zero32 pow_num1_32opt in
    let divider1 = builtin pow ten pow_num1_32 in
    let divider2 = builtin pow ten pow_num2_32 in
    let rem_num1 = builtin rem genschain divider1 in
    let rem_num2 = builtin rem genschain divider2 in
    let genzeros = builtin sub rem_num1 rem_num2 in
      builtin div genzeros divider2

let get_upgraded_gen =
  fun (gen: Uint256) =>
  fun (gen_upgrade_prc: Uint256) =>
    let gen_prc = builtin div gen gen_upgrade_prc in
    let new_gen = builtin add gen gen_prc in
    let ninetynine_bool = builtin lt new_gen ninetynine in
    match ninetynine_bool with
    | True => new_gen
    | False => ninetynine
    end

let get_upgraded_genschain =
  fun (genschain: Uint256) =>
  fun (num: Uint256) =>
  fun (gen_upgrade_prc: Uint256) =>
    let pow_num2 = builtin mul two num in
    let pow_num1 = builtin add two pow_num2 in
    let pow_num2_32opt = builtin to_uint32 pow_num2 in
    let pow_num1_32opt = builtin to_uint32 pow_num1 in
    let pow_num2_32 = option_uint32 zero32 pow_num2_32opt in
    let pow_num1_32 = option_uint32 zero32 pow_num1_32opt in
    let divider1 = builtin pow ten pow_num1_32 in
    let divider2 = builtin pow ten pow_num2_32 in
    let rem_num1 = builtin rem genschain divider1 in
    let rem_num2 = builtin rem genschain divider2 in
    let genzeros = builtin sub rem_num1 rem_num2 in
    let gen = builtin div genzeros divider2 in
    let genchain_pre = builtin sub genschain rem_num1 in
    let genchain_pre2 = builtin add genchain_pre rem_num2 in
    let new_gen = get_upgraded_gen gen gen_upgrade_prc in
    let new_genzeros = builtin mul new_gen divider2 in
      builtin add genchain_pre2 new_genzeros

(* maybe better to have 1 function with match? *)
let get_downgraded_genschain =
  fun (need_downgrade: Bool) =>
  fun (genschain: Uint256) =>
  fun (num: Uint256) =>
  fun (gen_downgrade_prc: Uint256) =>
    match need_downgrade with
    | False =>
      let pow_num2 = builtin mul two num in
      let pow_num1 = builtin add two pow_num2 in
      let pow_num2_32opt = builtin to_uint32 pow_num2 in
      let pow_num1_32opt = builtin to_uint32 pow_num1 in
      let pow_num2_32 = option_uint32 zero32 pow_num2_32opt in
      let pow_num1_32 = option_uint32 zero32 pow_num1_32opt in
      let divider1 = builtin pow ten pow_num1_32 in
      let divider2 = builtin pow ten pow_num2_32 in
      let rem_num1 = builtin rem genschain divider1 in
      let rem_num2 = builtin rem genschain divider2 in
      let genzeros = builtin sub rem_num1 rem_num2 in
      let gen = builtin div genzeros divider2 in
      let genchain_pre = builtin sub genschain rem_num1 in
      let genchain_pre2 = builtin add genchain_pre rem_num2 in
      let new_gen = builtin div gen gen_downgrade_prc in
      let new_genzeros = builtin mul new_gen divider2 in
        builtin add genchain_pre2 new_genzeros
    | True =>
        builtin mul genschain one
    end

let get_dragon_token_id =
  fun (dragon: Dragon) =>
    match dragon with
    | Dragon token_id owner stage token_uri token_gen_battle token_gen_image =>
      token_id
    end

let get_dragon_owner =
  fun (dragon: Dragon) =>
    match dragon with
    | Dragon token_id owner stage token_uri token_gen_battle token_gen_image =>
      owner
    end

let get_dragon_stage =
  fun (dragon: Dragon) =>
    match dragon with
    | Dragon token_id owner stage token_uri token_gen_battle token_gen_image =>
      stage
    end

let get_dragon_gen_battle =
  fun (dragon: Dragon) =>
    match dragon with
    | Dragon token_id owner stage token_uri token_gen_battle token_gen_image =>
      token_gen_battle
    end

(* todo *)
let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotAuthorised      => Int32 -1
      | CodeNoPubKey           => Int32 -2
      | CodeVerificationFailed => Int32 -3
      | CodeUint32Overflow     => Int32 -4
      | CodeNotInWaitingList   => Int32 -5
      | CodeSameDragon         => Int32 -6
      | CodeNotAnOwner         => Int32 -7
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract FightPlace

(*  Parameters *)
(contract_owner: ByStr20,
 main_dzt : ByStr20)

(* Mutable fields *)
(* todo *)
field waiting_list: Map Uint256 Uint256 = Emp Uint256 Uint256

field entropy : Uint256 = Uint256 0


field random_fld : Uint256 = Uint256 0
field d1_random_attack_fld : Uint256 = Uint256 0
field d1_random_defence_fld : Uint256 = Uint256 0
field d2_random_attack_fld : Uint256 = Uint256 0
field d2_random_defence_fld : Uint256 = Uint256 0
field random_luck_fld : Uint256 = Uint256 0

field winner_random_attack_fld : Uint256 = Uint256 0
field winner_random_defence_fld : Uint256 = Uint256 0
field loser_random_attack_fld : Uint256 = Uint256 0
field loser_random_defence_fld : Uint256 = Uint256 0

field gen_upgrade_prc_fld : Uint256 = Uint256 5
field gen_downgrade_prc_fld : Uint256 = Uint256 10

field tmp_initiator_adr : ByStr20 = 0x0000000000000000000000000000000000000000
field tmp_token_id : Uint256 = Uint256 0

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True =>
  | False =>
    err = CodeNotAuthorised;
    ThrowError err
  end
end

procedure SetFldsRandWinLose (num_winner: Uint256)
  d2ra <- d2_random_attack_fld;
  winner_random_attack_fld := d2ra;
  d2rd <- d2_random_defence_fld;
  winner_random_defence_fld := d2rd;
  d1ra <- d1_random_attack_fld;
  loser_random_attack_fld := d1ra;
  d1rd <- d1_random_defence_fld;
  loser_random_defence_fld := d1rd;

  match num_winner with
  | one =>
    od1ra <- d1_random_attack_fld;
    winner_random_attack_fld := od1ra;
    od1rd <- d1_random_defence_fld;
    winner_random_defence_fld := od1rd;
    od2ra <- d2_random_attack_fld;
    loser_random_attack_fld := od2ra;
    od2rd <- d2_random_defence_fld;
    loser_random_defence_fld := od2rd
  end
end

procedure SendFightsResultsDraw(token_id1: Uint256, token_id2: Uint256)
  e = {
    _eventname : "FightsResultsDraw";
    token_id1: token_id1;
    token_id2: token_id2
  };
  event e
end

procedure SendFightsResultsWinLose(token_id_winner: Uint256, gen_battle_winner: Uint256, token_id_loser: Uint256, gen_battle_loser: Uint256)
  e = {
    _eventname : "FightsResultsWinLose";
    token_id_winner: token_id_winner;
    gen_battle_winner: gen_battle_winner;
    token_id_loser: token_id_loser;
    gen_battle_loser: gen_battle_loser
  };
  event e;

  new_gen1 = gen_battle_winner;
  token_id1 = token_id_winner;
  new_gen2 = gen_battle_loser;
  token_id2 = token_id_loser;
  id_gen1 = IdBattleGenPair token_id1 new_gen1;
  id_gen2 = IdBattleGenPair token_id2 new_gen2;
  id_gen_list = two_drgnpairs id_gen1 id_gen2;

  changegens_call = {
    _tag: "ChangeBattleGens";
    _recipient: main_dzt;
    _amount: Uint128 0;
    id_gen_list: id_gen_list
  };
  msgs = one_msg changegens_call;
  send msgs
end

procedure AfterFightWinLose(num_winner: Uint256, token_id_winner: Uint256, gen_battle_winner_param: Uint256, token_id_loser: Uint256, gen_battle_loser_param: Uint256)
  e = {
    _eventname : "AfterFightWinLose";
    num_winner: num_winner;
    gen_battle_winner_param: gen_battle_winner_param;
    gen_battle_loser_param: gen_battle_loser_param
  };
  event e;

  (* call procedure to set winner and loser fields *)
  SetFldsRandWinLose num_winner;

  winner_random_attack <- winner_random_attack_fld;
  winner_random_defence <- winner_random_defence_fld;
  loser_random_attack <- loser_random_attack_fld;
  loser_random_defence <- loser_random_defence_fld;
  random_luck <- random_luck_fld;
  gen_upgrade_prc <- gen_upgrade_prc_fld;
  gen_downgrade_prc <- gen_downgrade_prc_fld;

  (* calculating gens *)
  (* last 2 digits - gen luck *)
  (* next 20 digits - gen attack *)
  (* next 20 digits - gen defence *)
  (* other are reserved *)
  gen_battle_winner = gen_battle_winner_param;
  winner_luck = builtin rem gen_battle_winner ten2;
  gen_battle_winner = builtin sub gen_battle_winner winner_luck;
  gen_battle_winner = builtin div gen_battle_winner ten2;

  winner_gen_attack = builtin rem gen_battle_winner ten20;
  gen_battle_winner = builtin sub gen_battle_winner winner_gen_attack;
  gen_battle_winner = builtin div gen_battle_winner ten20;

  winner_gen_defence = builtin rem gen_battle_winner ten20;
  (* preparing for assemble *)
  gen_battle_winner = builtin sub gen_battle_winner winner_gen_defence;

  gen_battle_loser = gen_battle_loser_param;
  loser_luck = builtin rem gen_battle_loser ten2;
  gen_battle_loser = builtin sub gen_battle_loser loser_luck;
  gen_battle_loser = builtin div gen_battle_loser ten2;

  loser_gen_attack = builtin rem gen_battle_loser ten20;
  gen_battle_loser = builtin sub gen_battle_loser loser_gen_attack;
  gen_battle_loser = builtin div gen_battle_loser ten20;

  loser_gen_defence = builtin rem gen_battle_loser ten20;
  (* preparing for assemble *)
  gen_battle_loser = builtin sub gen_battle_loser loser_gen_defence;

  (* upgrade winner gen *)
  new_winner_gen_attack = get_upgraded_genschain winner_gen_attack winner_random_attack gen_upgrade_prc;
  e = {
    _eventname : "new_winner_gen_attack";
    winner_gen_attack: winner_gen_attack;
    new_winner_gen_attack: new_winner_gen_attack;
    winner_random_attack: winner_random_attack;
    gen_upgrade_prc: gen_upgrade_prc
  };
  event e;

  new_winner_gen_defence = get_upgraded_genschain winner_gen_defence winner_random_defence gen_upgrade_prc;
  e = {
    _eventname : "new_winner_gen_defence";
    winner_gen_defence: winner_gen_defence;
    new_winner_gen_defence: new_winner_gen_defence;
    winner_random_defence: winner_random_defence;
    gen_upgrade_prc: gen_upgrade_prc
  };
  event e;
  (* downgrade loser gen *)
  (* if loser have big luck gen he will avoid downgrade, we taking 80% of loser luck only *)
  loser_luck08 = builtin mul loser_luck eight;
  loser_luck08 = builtin div loser_luck08 ten;
  loser_avoid_downgrade = builtin lt random_luck loser_luck08;
  new_loser_gen_attack = get_downgraded_genschain loser_avoid_downgrade loser_gen_attack loser_random_attack gen_downgrade_prc;
  e = {
    _eventname : "new_loser_gen_attack";
    loser_avoid_downgrade: loser_avoid_downgrade;
    loser_gen_attack: loser_gen_attack;
    new_loser_gen_attack: new_loser_gen_attack;
    loser_random_attack: loser_random_attack;
    gen_downgrade_prc: gen_downgrade_prc
  };
  event e;

  new_loser_gen_defence = get_downgraded_genschain loser_avoid_downgrade loser_gen_defence loser_random_defence gen_downgrade_prc;

  e = {
    _eventname : "new_loser_gen_defence";
    loser_avoid_downgrade: loser_avoid_downgrade;
    loser_gen_defence: loser_gen_defence;
    new_loser_gen_defence: new_loser_gen_defence;
    loser_random_defence: loser_random_defence;
    gen_downgrade_prc: gen_downgrade_prc
  };
  event e;

  (* assemble new gens for loser and winner *)
  gen_battle_winner = builtin add gen_battle_winner new_winner_gen_defence;
  gen_battle_winner = builtin mul gen_battle_winner ten20;
  gen_battle_winner = builtin add gen_battle_winner new_winner_gen_attack;
  gen_battle_winner = builtin mul gen_battle_winner ten2;
  gen_battle_winner = builtin add gen_battle_winner winner_luck;

  e = {
    _eventname : "gen_battle_winner";
    gen_battle_winner: gen_battle_winner
  };
  event e;

  gen_battle_loser = builtin add gen_battle_loser new_loser_gen_defence;
  gen_battle_loser = builtin mul gen_battle_loser ten20;
  gen_battle_loser = builtin add gen_battle_loser new_loser_gen_attack;
  gen_battle_loser = builtin mul gen_battle_loser ten2;
  gen_battle_loser = builtin add gen_battle_loser loser_luck;

  e = {
    _eventname : "gen_battle_loser";
    gen_battle_loser: gen_battle_loser
  };
  event e;

  SendFightsResultsWinLose token_id_winner gen_battle_winner token_id_loser gen_battle_loser
end

procedure AfterFightDraw(token_id1: Uint256, gen_battle1: Uint256, token_id2: Uint256, gen_battle2: Uint256)
  d1_luck = builtin rem gen_battle1 ten2;
  d2_luck = builtin rem gen_battle2 ten2;

  e = {
    _eventname : "AfterFightDraw";
    d1_luck: d1_luck;
    d2_luck: d2_luck
  };
  event e;

  luck_res_bool_eq = builtin eq d1_luck d2_luck;
  luck_res_bool_lt = builtin lt d1_luck d2_luck;
  match luck_res_bool_eq with
  | True =>
    SendFightsResultsDraw token_id1 token_id2
  | False =>
    match luck_res_bool_lt with
    | True =>
      AfterFightWinLose two token_id2 gen_battle2 token_id1 gen_battle1
    | False =>
      AfterFightWinLose one token_id1 gen_battle1 token_id2 gen_battle2
    end
  end
end

procedure FightDo(token_id1: Uint256, gen_battle1_param: Uint256, token_id2: Uint256, gen_battle2_param: Uint256)
  (* generating random values *)
  entropyNumber <- entropy;
  current_block <- & BLOCKNUMBER;

  random = random entropyNumber current_block;



(* remove random_fld after tests *)
  (* random = Uint256 88888414732297353093892224544004556412855177250281183152294182633944343418460; *)
  random_fld := random;

  e = {
    _eventname : "FightDo";
    random: random;
    token_id1: token_id1;
    gen_battle1_param: gen_battle1_param;
    token_id2: token_id2;
    gen_battle2_param: gen_battle2_param
  };
  event e;



  d1_random_attack = builtin rem random ten;
  d1_random_attack_fld := d1_random_attack;
  random = builtin sub random d1_random_attack;
  random = builtin div random ten;

  d1_random_defence = builtin rem random ten;
  d1_random_defence_fld := d1_random_defence;
  random = builtin sub random d1_random_defence;
  random = builtin div random ten;

  d2_random_attack = builtin rem random ten;
  d2_random_attack_fld := d2_random_attack;
  random = builtin sub random d2_random_attack;
  random = builtin div random ten;

  d2_random_defence = builtin rem random ten;
  d2_random_defence_fld := d2_random_defence;
  random = builtin sub random d2_random_defence;
  random = builtin div random ten;

  random_luck = builtin rem random ten2;
  random_luck_fld := random_luck;

  (* calculating gens *)
  (* last 2 digits - gen luck *)
  (* next 20 digits - gen attack *)
  (* next 20 digits - gen defence *)
  (* other are reserved *)
  gen_battle1 = gen_battle1_param;
  d1_luck = builtin rem gen_battle1 ten2;
  gen_battle1 = builtin sub gen_battle1 d1_luck;
  gen_battle1 = builtin div gen_battle1 ten2;

  d1_gen_attack = builtin rem gen_battle1 ten20;
  gen_battle1 = builtin sub gen_battle1 d1_gen_attack;
  gen_battle1 = builtin div gen_battle1 ten20;

  d1_gen_defence = builtin rem gen_battle1 ten20;

  gen_battle2 = gen_battle2_param;
  d2_luck = builtin rem gen_battle2 ten2;
  gen_battle2 = builtin sub gen_battle2 d2_luck;
  gen_battle2 = builtin div gen_battle2 ten2;

  d2_gen_attack = builtin rem gen_battle2 ten20;
  gen_battle2 = builtin sub gen_battle2 d2_gen_attack;
  gen_battle2 = builtin div gen_battle2 ten20;

  d2_gen_defence = builtin rem gen_battle2 ten20;

  (* get gens patricipating in fights *)
  d1_attack = get_gen_val d1_gen_attack d1_random_attack;
  d1_defence = get_gen_val d1_gen_defence d1_random_defence;

  d2_attack = get_gen_val d2_gen_attack d2_random_attack;
  d2_defence = get_gen_val d2_gen_defence d2_random_defence;

  (* fight process - matching gens *)
  luck_bool_eq = builtin eq d1_luck d2_luck;
  luck_bool_neg = builtin lt d1_luck d2_luck;

  res1_bool_eq = builtin eq d1_defence d2_attack;
  (* true - win d2, false - win d1 *)
  res1_bool_neg = builtin lt d1_defence d2_attack;

  res2_bool_eq = builtin eq d2_defence d1_attack;
  (* true - win d1, false - win d2 *)
  res2_bool_neg = builtin lt d2_defence d1_attack;

  entropy := random;

  match res1_bool_eq with
  | True =>
    match res2_bool_eq with
    | True =>
      (* draw need check luck *)
      match luck_bool_eq with
      | True =>
        (* draw *)
        AfterFightDraw token_id1 gen_battle1_param token_id2 gen_battle2_param
      | False =>
        match luck_bool_neg with
        | True =>
          (* d2 win *)
          AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
        | False =>
          (* d1 win *)
          AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
        end
      end
    | False =>
      match res2_bool_neg with
      | True =>
        (* d1 win *)
        AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
      | False =>
        (* d2 win *)
        AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
      end
    end
  | False =>
    match res1_bool_neg with
    | True =>
      (* round 1: d2 win  *)
      match res2_bool_eq with
      | True =>
        (* d2 win  *)
        AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
      | False =>
        match res2_bool_neg with
        | True =>
          (* draw need check luck *)
          match luck_bool_eq with
          | True =>
            (* draw *)
            AfterFightDraw token_id1 gen_battle1_param token_id2 gen_battle2_param
          | False =>
            match luck_bool_neg with
            | True =>
              (* d2 win *)
              AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
            | False =>
              (* d1 win *)
              AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
            end
          end
        | False =>
          (* d2 win  *)
          AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
        end
      end
    | False =>
      (* round 1: d1 win  *)
      match res2_bool_eq with
      | True =>
        (* d1 win  *)
        AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
      | False =>
        match res2_bool_neg with
        | True =>
          (* d1 win  *)
          AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
        | False =>
          (* draw need check luck *)
          match luck_bool_eq with
          | True =>
            (* draw *)
            AfterFightDraw token_id1 gen_battle1_param token_id2 gen_battle2_param
          | False =>
            match luck_bool_neg with
            | True =>
              (* d2 win *)
              AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
            | False =>
              (* d1 win *)
              AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
            end
          end
        end
      end
    end
  end
end

procedure CheckIsSameDragon(token_id1: Uint256, token_id2: Uint256)
  is_same_dragon = builtin eq token_id1 token_id2;
  match is_same_dragon with
  | True =>
  | False =>
    err = CodeSameDragon;
    ThrowError err
  end
end

procedure CheckInWatingList(token_id: Uint256)
  token_inwatinglist <- exists waiting_list[token_id];
  match token_inwatinglist with
  | False =>
    e = {
      _eventname: "CheckInWatingList_false";
      token_id: token_id;
      sender: _sender
    };
    event e;
    err = CodeNotInWaitingList;
    ThrowError err
  | True =>
  end

end

transition GetDragonsCallBack(dragons: List Dragon)
(* todo: create procedure to check *)

(* todo: need to check is this transition called from main contract *)
(* todo: need to check we really have such dragons in waiting list *)
(* todo field as initiator of fights *)
(* todo: check owner of the dragon - check is first or second dragons owner is who starting this fight *)
(* dragon1_owner = sender of dragon2 = sender *)
(* todo: check token_id don't fight with same dragon *)

  dragons_nth = @list_nth Dragon;
  dragon_one_opt = dragons_nth zero32 dragons;
  dragon_two_opt = dragons_nth one32 dragons;

  dragon_one = option_dragon default_dragon dragon_one_opt;
  dragon_two = option_dragon default_dragon dragon_two_opt;

  dragon1_token_id = get_dragon_token_id dragon_one;
  dragon1_owner = get_dragon_owner dragon_one;
  dragon1_stage = get_dragon_stage dragon_one;
  dragon1_gen_battle = get_dragon_gen_battle dragon_one;

  dragon2_token_id = get_dragon_token_id dragon_two;
  dragon2_owner = get_dragon_owner dragon_two;
  dragon2_stage = get_dragon_stage dragon_two;
  dragon2_gen_battle = get_dragon_gen_battle dragon_two;

  e = {
    _eventname : "DragonsNth";
    dragon_one: dragon_one;
    dragon_two: dragon_two;
    dragon1_token_id: dragon1_token_id;
    dragon1_owner: dragon1_owner;
    dragon1_stage: dragon1_stage;
    dragon1_gen_battle: dragon1_gen_battle;
    dragon2_token_id: dragon2_token_id;
    dragon2_owner: dragon2_owner;
    dragon2_stage: dragon2_stage;
    dragon2_gen_battle: dragon2_gen_battle
  };
  event e;

  (* todo: Need to check one of the dragons is in waiting list and other dragons owner is starting fight *)

(* dragon1_owner *)
(* dragon2_owner *)


  (* removing dragons from waiting list *)
  token1_inwatinglist <- exists waiting_list[dragon1_token_id];
  match token1_inwatinglist with
  | False =>
  | True =>
    delete waiting_list[dragon1_token_id]
  end;
  token2_inwatinglist <- exists waiting_list[dragon2_token_id];
  match token2_inwatinglist with
  | False =>
  | True =>
    delete waiting_list[dragon2_token_id]
  end;

  (* start fight process with gens matching with this 2 dragons *)
  FightDo dragon1_token_id dragon1_gen_battle dragon2_token_id dragon2_gen_battle
end

transition FightStart(who_id: Uint256, with_id: Uint256)
  tmp_initiator_adr := _sender;
  tmp_token_id := with_id;

  CheckIsSameDragon who_id with_id;
  CheckInWatingList with_id;

  ids = two_listid who_id with_id;
  e = {
    _eventname: "FightStart_with_ids";
    sender: _sender;
    ids: ids
  };
  event e;

  getdragons_call = {
    _tag: "GetDragons";
    _recipient: main_dzt;
    _amount: Uint128 0;
    ids: ids
  };
  msgs = one_msg getdragons_call;
  send msgs
end

transition IsTokenOwnerCallBack()
  (* Owner wanted to put dragon to waiting list *)
  initiator_adr <- tmp_initiator_adr;
  token_id <- tmp_token_id;
  token_inwatinglist <- exists waiting_list[token_id];
  match token_inwatinglist with
  | False =>
    waiting_list[token_id] := token_id;
    e = {
      _eventname: "waiting_list_add";
      token_id: token_id;
      initiator_adr: initiator_adr;
      sender: _sender
    };
    event e
  | True =>
    delete waiting_list[token_id];
    e = {
      _eventname: "waiting_list_remove";
      token_id: token_id;
      initiator_adr: initiator_adr;
      sender: _sender
    };
    event e
  end
end

transition FightListAddDel(token_id: Uint256)
  (* checking is sender owner of the dragon and adding or removing dragon to list*)
  tmp_initiator_adr := _sender;
  tmp_token_id := token_id;

  e = {
    _eventname: "FightListAddDel";
    token_id: token_id;
    address: _sender
  };
  event e;

  checktokenowner_call = {
    _tag: "CheckTokenOwner";
    _recipient: main_dzt;
    _amount: Uint128 0;
    token_id: token_id;
    address: _sender
  };
  msgs = one_msg checktokenowner_call;
  send msgs
end
