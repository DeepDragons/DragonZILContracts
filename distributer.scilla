scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils PairUtils ListUtils
library DragonZILDistributerLib

type ImageDetails =
| Aura
| Horns
| Scales
| Spots
| Tails
| Wings
| Spins
| Body
| Eyes
| Head

type Error =
  | CodeNotContractOwner

let zero_address = 0x0000000000000000000000000000000000000000
let dummy_str = ""
let default_stage = Uint32 0
let zero = Uint256 0
let one = Uint256 1
let two = Uint256 2
let three = Uint256 3
let four = Uint256 4
let five = Uint256 5
let six = Uint256 6
let seven = Uint256 7
let eight = Uint256 8
let nine = Uint256 9
let ten = Uint256 10
let ten2 = Uint256 100
let ten3 = Uint256 1000
let start_gim = Uint256 7770

(* Library functions *)
let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
  fun (msg1 : Message) =>
  fun (msg2 : Message) =>
    let msgs_tmp = one_msg msg2 in
    Cons {Message} msg1 msgs_tmp

let random =
  fun (entropy: Uint256) =>
  fun (block_number: BNum) =>
  fun (addr: ByStr20) =>
    let addr_hash = builtin keccak256hash addr in
    let entropy_hash = builtin keccak256hash entropy in
    let blockhash = builtin keccak256hash block_number in
    let ehash = builtin concat entropy_hash blockhash in
    let ahash = builtin concat ehash addr_hash in
    let last_hash = builtin concat ehash ahash in
    let hash = builtin keccak256hash last_hash in
      builtin to_uint256 hash

let calc_gens_tmp_new =
  fun (old_val: Uint256) =>
  fun (gen_num: Uint256) =>
  fun (check_with: Uint256) =>
  fun (val: Uint256) =>
    let gen_bool = builtin eq gen_num check_with in
    match gen_bool with
    | True => val
    | False => old_val
    end

let calc_gens_2opt_do =
  fun (gen_num: Uint256) =>
  fun (val1: Uint256) =>
  fun (val2: Uint256) =>
    let gen_bool = builtin lt gen_num five in
    match gen_bool with
    | True => val1
    | False => val2
    end

let calc_gens_2opt =
  fun (old_val: Uint256) =>
  fun (gen_num: Uint256) =>
  fun (check_with: Uint256) =>
  fun (gen_num2: Uint256) =>
  fun (val1: Uint256) =>
  fun (val2: Uint256) =>
    let gen_bool = builtin eq gen_num check_with in
    match gen_bool with
    | True => calc_gens_2opt_do gen_num2 val1 val2
    | False => old_val
    end

let get_one_gen =
  fun (gen_rand: Uint256) =>
  fun (c0: Uint256) =>
  fun (c1: Uint256) =>
  fun (c2: Uint256) =>
  fun (c3: Uint256) =>
  fun (c4: Uint256) =>
  fun (c5: Uint256) =>
  fun (c6: Uint256) =>
  fun (c7: Uint256) =>
  fun (c8: Uint256) =>
    let gen0 = calc_gens_tmp_new zero gen_rand zero c0 in
    let gen1 = calc_gens_tmp_new gen0 gen_rand zero c1 in
    let gen2 = calc_gens_tmp_new gen1 gen_rand zero c2 in
    let gen3 = calc_gens_tmp_new gen2 gen_rand zero c3 in
    let gen4 = calc_gens_tmp_new gen3 gen_rand zero c4 in
    let gen5 = calc_gens_tmp_new gen4 gen_rand zero c5 in
    let gen6 = calc_gens_tmp_new gen5 gen_rand zero c6 in
    let gen7 = calc_gens_tmp_new gen6 gen_rand zero c7 in
      calc_gens_tmp_new gen7 gen_rand zero c8

let next_digit =
  fun (r: Uint256) =>
  fun (gr: Uint256) =>
    let r0 = builtin sub r gr in
      builtin div r0 ten

let re_random =
  fun (r: Uint256) =>
  fun (gr: Uint256) =>
    let r0 = next_digit r gr in
      builtin rem r0 ten

let get_detail_gen =
  fun (gr0: Uint256) =>
  fun (gr1: Uint256) =>
  fun (detail: ImageDetails) =>
    match detail with
    | Aura =>
      let gen = get_one_gen gr0 zero zero zero zero one one one two three in
        calc_gens_2opt gen gr0 nine gr1 four five
    | Horns =>
      let gen = get_one_gen gr0 zero zero zero one one two three four five in
        calc_gens_2opt gen gr0 nine gr1 six seven
    | Scales =>
      let gen = get_one_gen gr0 zero zero zero zero one one one two two in
        calc_gens_2opt gen gr0 nine gr1 three four
    | Spots => zero
    | Tails =>
      let gen = get_one_gen gr0 zero one one one two three four five six in
        calc_gens_2opt gen gr0 nine gr1 seven eight
    | Wings =>
      let gen = get_one_gen gr0 zero zero zero one one one two two three in
        calc_gens_2opt gen gr0 nine gr1 four five
    | Spins =>
      let gen = get_one_gen gr0 zero zero zero one one two two two two in
        calc_gens_2opt gen gr0 nine gr1 three four
    | Body =>
      let gen = get_one_gen gr0 one one one one one one one one one in
        calc_gens_2opt gen gr0 nine gr1 two three
    | Eyes =>
      let gen = get_one_gen gr0 one one one two three four five six seven in
        calc_gens_2opt gen gr0 nine gr1 eight nine
    | Head =>
      let gen = get_one_gen gr0 one one one one one one one two three in
        calc_gens_2opt gen gr0 nine gr1 four five
    end

let get_details_color =
  fun (r: Uint256) =>
    let gr = builtin rem r ten in

let get_image_gens =
  fun (r: Uint256) =>
    let gr0 = builtin rem r ten in
    let gr1 = re_random r gr0 in
    let aura = get_detail_gen gr0 gr1 Aura in
    let gr2 = builtin rem gr1 ten in
    let aura_color = builtin div gr2 two in

    gen_rand = builtin rem random ten;
    gen = builtin div gen_rand two;

    let gim0 = builtin add start_gim aura in
    let gim1 = builtin mul gim0 ten in
    let gim2 = builtin add gim1 aura_color in




let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotContractOwner => Int32 -1
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract DragonZILDistributer
(
  contract_owner: ByStr20
)

field entropy : Uint256 = Uint256 0

procedure GenerateImageGen(token_id: Uint256, random_val: Uint256)
  random = random_val;
  (* gens init for current token *)
  gens_image_ = Uint256 777;
  gen_tmp = Uint256 0;

  (* image gen Aura - 5 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three zero;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six one;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight three;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 four five;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Aura *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Horns - 7 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five two;
  gen = calc_gens_tmp_new gen gen_rand six three;
  gen = calc_gens_tmp_new gen gen_rand seven four;
  gen = calc_gens_tmp_new gen gen_rand eight five;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 six seven;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Horns *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Scales - 4 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three zero;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six one;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight two;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 three four;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Scales *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Spots - 9 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three two;
  gen = calc_gens_tmp_new gen gen_rand four three;
  gen = calc_gens_tmp_new gen gen_rand five four;
  gen = calc_gens_tmp_new gen gen_rand six five;
  gen = calc_gens_tmp_new gen gen_rand seven six;
  gen = calc_gens_tmp_new gen gen_rand eight seven;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 eight nine;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Spots *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Tail - 8 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four two;
  gen = calc_gens_tmp_new gen gen_rand five three;
  gen = calc_gens_tmp_new gen gen_rand six four;
  gen = calc_gens_tmp_new gen gen_rand seven five;
  gen = calc_gens_tmp_new gen gen_rand eight six;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 seven eight;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Tail *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Wings - 5 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six two;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight three;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 four five;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Wings *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Spins - 4 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five two;
  gen = calc_gens_tmp_new gen gen_rand six two;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight two;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 three four;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Spins *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Body - 3 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero one;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six one;
  gen = calc_gens_tmp_new gen gen_rand seven one;
  gen = calc_gens_tmp_new gen gen_rand eight one;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 two three;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Body *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Eyes - 9 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero one;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three two;
  gen = calc_gens_tmp_new gen gen_rand four three;
  gen = calc_gens_tmp_new gen gen_rand five four;
  gen = calc_gens_tmp_new gen gen_rand six five;
  gen = calc_gens_tmp_new gen gen_rand seven six;
  gen = calc_gens_tmp_new gen gen_rand eight seven;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 eight nine;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Eyes *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Head - 5 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero one;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six one;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight three;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 four five;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Claws *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* color scheme *)
  gen_rand = builtin rem random ten3;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten3;
  gen_rand = builtin div gen_rand four;
  i = builtin mul gens_image_ ten3;
  i2 = builtin add i gen_rand;
  gens_image_ = i2;

  (* mutagenImutable *)
  (* last gen no need to move to next digit *)
  gen_rand = builtin rem random ten3;
  gen_rand = builtin div gen_rand four;
  i = builtin mul gens_image_ ten3;
  i2 = builtin add i gen_rand;
  gens_image_ = i2;

  (* store gens to token *)
  token_gen_image[token_id] := gens_image_
end

procedure GenerateGens(token_id: Uint256, to: ByStr20)
  entropyNumber <- entropy;
  current_block <- & BLOCKNUMBER;

  random1 = random entropyNumber current_block to;
  random2 = random random1 current_block to;

  entropy := random2;

  token_gen_battle[token_id] := random1;
  GenerateImageGen token_id random2
end

(* DragonZIL procedures *)

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end
