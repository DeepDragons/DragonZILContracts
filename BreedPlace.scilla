scilla_version 0

import PairUtils ListUtils
(***************************************************)
(*               Associated library                *)
(***************************************************)
library BreedPlace

(* Error events *)
type Error =
  | CodeNotAuthorised
  | CodeNotInWaitingList
  | CodeSameDragon
  | CodeNotAnOwner
  | CodeCallNotMainDzt
  | CodeStageIncorrect
  | CodeNotContractOwner

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotAuthorised      => Int32 -1
      | CodeNotInWaitingList   => Int32 -2
      | CodeSameDragon         => Int32 -3
      | CodeNotAnOwner         => Int32 -4
      | CodeCallNotMainDzt     => Int32 -5
      | CodeStageIncorrect     => Int32 -6
      | CodeNotContractOwner   => Int32 -7
      end
    in
    { _exception : "Error"; code : result_code }

let zero = Uint256 0
let zero128 = Uint128 0
let zero256 = Uint256 0
let zero32 = Uint32 0
let one = Uint256 1
let one32 = Uint32 1
let two = Uint256 2
let two32 = Uint32 2
let three = Uint256 3
let four = Uint256 4
let five = Uint256 5
let six = Uint256 6
let seven = Uint256 7
let eight = Uint256 8
let nine = Uint256 9
let ten = Uint256 10
let fourtyfive = Uint256 45
let ninety = Uint256 90
let ten2 = Uint256 100
let ten2_128 = Uint128 100
let ten3 = Uint256 1000
let ten10 = Uint256 10000000000
let ten20 = Uint256 100000000000000000000

let zero_address = 0x0000000000000000000000000000000000000000
let dummy_str = ""
let default_stage = Uint32 0

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint32 = @option_value Uint32
let option_uint128 = @option_value Uint128
let option_uint256 = @option_value Uint256
let option_adr = @option_value ByStr20

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let random =
  fun (entropy: Uint256) =>
  fun (block_number: BNum) =>
    let entropy_hash = builtin keccak256hash entropy in
    let blockhash = builtin keccak256hash block_number in
    let ehash = builtin concat entropy_hash blockhash in
    let hash = builtin keccak256hash ehash in
      builtin to_uint256 hash

(* first two gens have 3 digits, next two 1 digit, other 2 digits *)
let get_gen_val =
  fun (dignumval: Uint256) =>
  fun (skipnumval: Uint256) =>
  fun (genschain: Uint256) =>
  fun (num: Uint256) =>
    let skipnum = builtin add num skipnumval in
    let pow_num2 = builtin mul dignumval skipnum in
    let pow_num1 = builtin add dignumval pow_num2 in
    let pow_num2_32opt = builtin to_uint32 pow_num2 in
    let pow_num1_32opt = builtin to_uint32 pow_num1 in
    let pow_num2_32 = option_uint32 zero32 pow_num2_32opt in
    let pow_num1_32 = option_uint32 zero32 pow_num1_32opt in
    let divider1 = builtin pow ten pow_num1_32 in
    let divider2 = builtin pow ten pow_num2_32 in
    let rem_num1 = builtin rem genschain divider1 in
    let rem_num2 = builtin rem genschain divider2 in
    let genzeros = builtin sub rem_num1 rem_num2 in
      builtin div genzeros divider2

let calc_gens_tmp_new =
  fun (old_val: Uint256) =>
  fun (gen_num: Uint256) =>
  fun (check_with: Uint256) =>
  fun (val: Uint256) =>
    let gen_bool = builtin eq gen_num check_with in
    match gen_bool with
    | True => val
    | False => old_val
    end

let calc_gens_2opt_do =
  fun (gen_num: Uint256) =>
  fun (val1: Uint256) =>
  fun (val2: Uint256) =>
    let gen_bool = builtin lt gen_num five in
    match gen_bool with
    | True => val1
    | False => val2
    end

let calc_gens_2opt =
  fun (old_val: Uint256) =>
  fun (gen_num: Uint256) =>
  fun (check_with: Uint256) =>
  fun (gen_num2: Uint256) =>
  fun (val1: Uint256) =>
  fun (val2: Uint256) =>
    let gen_bool = builtin eq gen_num check_with in
    match gen_bool with
    | True => calc_gens_2opt_do gen_num2 val1 val2
    | False => old_val
    end

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract BreedPlace

(*  Parameters *)
(
  contract_owner: ByStr20,
  contract_zlp: ByStr20,
  zlp_wallet:  ByStr20,
  contract_main_adr:  ByStr20,
  contract_main: ByStr20 with contract
    field token_gen_battle: Map Uint256 Uint256,
    field token_gen_image: Map Uint256 Uint256,
    field token_stage: Map Uint256 Uint32,
    field token_owners: Map Uint256 ByStr20
  end
)

(* Mutable fields *)
field waiting_list: Map Uint256 Uint128 = Emp Uint256 Uint128
field zlp_wallet_address: ByStr20 = zlp_wallet

field entropy : Uint256 = Uint256 42

field tmp_initiator_adr : ByStr20 = zero_address
field tmp_token_id : Uint256 = Uint256 0
field tmp_gen_image_fld : Uint256 = Uint256 0
field tmp_breed_price_fld : Uint128 = Uint128 0
field breed_comis_prc_fld : Uint128 = Uint128 10
field breed_min_price_fld : Uint128 = Uint128 25000000000000000000

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure TransferFromTo(amount: Uint128, from: ByStr20, to: ByStr20)
  is_zero = builtin eq zero128 amount;

  match is_zero with
  | False =>
    call_transfer_zlp = {
      _tag: "TransferFrom";
      _recipient: contract_zlp;
      _amount: Uint128 0;
      from: from;
      to: to;
      amount: amount
    };
    msgs = one_msg call_transfer_zlp;
    send msgs
  | True =>
  end
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True =>
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure SendBreedResults(new_dragon_gen_battle: Uint256, new_dragon_gen_image: Uint256)
  (* call Birth, owner of new egg will be the address stored in tmp_initiator_adr *)
  token_owner <- tmp_initiator_adr;

  token_gens = Pair {Uint256 Uint256} new_dragon_gen_image new_dragon_gen_battle;

  birth_call = {
    _tag: "Mint";
    _recipient: contract_main_adr;
    _amount: Uint128 0;
    to: token_owner;
    toekn_gens: token_gens
  };
  msgs = one_msg birth_call;
  send msgs
end

procedure ChangeImageGen(dignumval: Uint256, skipnumval: Uint256, new_gen_idx: Uint256, new_gen: Uint256)
  (* first two gens have 3 digits, next two 1 digit, other 2 digits *)
  genschain <- tmp_gen_image_fld;

  skipnum = builtin add new_gen_idx skipnumval;
  pow_num2 = builtin mul dignumval skipnum;
  pow_num1 = builtin add dignumval pow_num2;
  pow_num2_32opt = builtin to_uint32 pow_num2;
  pow_num1_32opt = builtin to_uint32 pow_num1;
  pow_num2_32 = option_uint32 zero32 pow_num2_32opt;
  pow_num1_32 = option_uint32 zero32 pow_num1_32opt;
  divider1 = builtin pow ten pow_num1_32;
  divider2 = builtin pow ten pow_num2_32;
  rem_num1 = builtin rem genschain divider1;
  rem_num2 = builtin rem genschain divider2;
  genchain_pre = builtin sub genschain rem_num1;

  new_genzeros = builtin mul new_gen divider2;
  new_genschain = builtin add genchain_pre new_genzeros;
  new_genschain = builtin add new_genschain rem_num2;

  tmp_gen_image_fld := new_genschain
end

procedure GenerateImageGen(rand: Uint256)
  random = rand;
  (* gens init for current token *)
  gens_image_ = Uint256 777;
  gen_tmp = Uint256 0;

  (* image gen Aura - 5 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three zero;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six one;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight three;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 four five;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Aura *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Horns - 7 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five two;
  gen = calc_gens_tmp_new gen gen_rand six three;
  gen = calc_gens_tmp_new gen gen_rand seven four;
  gen = calc_gens_tmp_new gen gen_rand eight five;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 six seven;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Horns *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Scales - 4 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three zero;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six one;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight two;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 three four;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Scales *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Spots - 9 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three two;
  gen = calc_gens_tmp_new gen gen_rand four three;
  gen = calc_gens_tmp_new gen gen_rand five four;
  gen = calc_gens_tmp_new gen gen_rand six five;
  gen = calc_gens_tmp_new gen gen_rand seven six;
  gen = calc_gens_tmp_new gen gen_rand eight seven;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 eight nine;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Spots *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Tail - 8 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four two;
  gen = calc_gens_tmp_new gen gen_rand five three;
  gen = calc_gens_tmp_new gen gen_rand six four;
  gen = calc_gens_tmp_new gen gen_rand seven five;
  gen = calc_gens_tmp_new gen gen_rand eight six;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 seven eight;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Tail *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Wings - 5 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six two;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight three;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 four five;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Wings *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Spins - 4 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five two;
  gen = calc_gens_tmp_new gen gen_rand six two;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight two;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 three four;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Spins *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Body - 3 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero one;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six one;
  gen = calc_gens_tmp_new gen gen_rand seven one;
  gen = calc_gens_tmp_new gen gen_rand eight one;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 two three;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Body *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Eyes - 9 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero one;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three two;
  gen = calc_gens_tmp_new gen gen_rand four three;
  gen = calc_gens_tmp_new gen gen_rand five four;
  gen = calc_gens_tmp_new gen gen_rand six five;
  gen = calc_gens_tmp_new gen gen_rand seven six;
  gen = calc_gens_tmp_new gen gen_rand eight seven;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 eight nine;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Eyes *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Head - 5 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero one;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six one;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight three;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 four five;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Claws *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* color scheme *)
  gen_rand = builtin rem random ten3;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten3;
  gen_rand = builtin div gen_rand four;
  i = builtin mul gens_image_ ten3;
  i2 = builtin add i gen_rand;
  gens_image_ = i2;

  (* mutagenImutable *)
  (* last gen no need to move to next digit *)
  gen_rand = builtin rem random ten3;
  gen_rand = builtin div gen_rand four;
  i = builtin mul gens_image_ ten3;
  i2 = builtin add i gen_rand;
  gens_image_ = i2;

  (* store gens to temp field *)
  tmp_gen_image_fld := gens_image_
end

procedure ChangeImageGenProc(gen_rand: Uint256, gen_idx: Uint256, dragon1_gen: Uint256, dragon2_gen: Uint256, dignumval: Uint256, skipnumval: Uint256)
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  match gen_bool_90 with
  | True =>
    match gen_bool_45 with
    | True =>
      ChangeImageGen dignumval skipnumval gen_idx dragon1_gen
    | False =>
      ChangeImageGen dignumval skipnumval gen_idx dragon2_gen
    end
  | False =>
    (* no need to change, we already have new random type *)
  end
end

procedure BreedDo(gen_image1_param: Uint256, gen_battle1_param: Uint256, gen_image2_param: Uint256, gen_battle2_param: Uint256)
  (* generating random values *)
  entropyNumber <- entropy;
  current_block <- & BLOCKNUMBER;
  random = random entropyNumber current_block;
  entropy := random;

  random_ = builtin div random ten10;
  GenerateImageGen random_;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* most of visual gens have 2 parts - type (0-9) and color(0-4) *)
  (* head have 1 digit *)
  (* claws have 1 digit *)
  (* Color Scheme have 3 digits *)
  (* MutagenImutable have 3 digits *)
  (* e.g. 777 03 03 43 31 14 33 44 11 73 1 4 110 158 *)
  (* Aura-12   Horns-11   Scales-10   Spots-9   Tail-8   Wings-7 *)
  (* Spins-6   Body-5   Eyes-4   Head-3   Claws-2   Color Scheme-1   MutagenImutable-0 *)

  (* gens init for current token *)
  gen_tmp = Uint256 0;

  (* we already have new dragons image gens generated *)
  (* 45% chances - new gen will be from dragon1, 45% chances - new gen will be from dragon2 *)
  (* 10% chances - will be random *)

  (* image gen Aura - 5 types *)
  (* image gen Color Aura *)
  gen_idx = Uint256 12;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  random = builtin div random ten2;
  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  (* ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen dignumval: Uint256, skipnumval: Uint256 *)
  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* image gen Horns - 7 types *)
  (* image gen Color Horns *)
  gen_idx = Uint256 11;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* image gen Scales - 4 types *)
  (* image gen Color Scales *)
  gen_idx = Uint256 10;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* image gen Spots - 9 types *)
  (* image gen Color Spots *)
  gen_idx = Uint256 9;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* image gen Tail - 8 types *)
  (* image gen Color Tail *)
  gen_idx = Uint256 8;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* image gen Wings - 5 types *)
  (* image gen Color Wings *)
  gen_idx = Uint256 7;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* image gen Spins - 4 types *)
  (* image gen Color Spins *)
  gen_idx = Uint256 6;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* image gen Body - 3 types *)
  (* image gen Color Body *)
  gen_idx = Uint256 5;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* image gen Eyes - 9 types *)
  (* image gen Color Eyes *)
  gen_idx = Uint256 4;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* image gen Head - 5 types *)
  gen_idx = Uint256 3;
  dragon1_gen = get_gen_val one four gen_image1_param gen_idx;
  dragon2_gen = get_gen_val one four gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen one four;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* image gen Color Claws *)
  gen_idx = Uint256 2;
  dragon1_gen = get_gen_val one four gen_image1_param gen_idx;
  dragon2_gen = get_gen_val one four gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen one four;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* color scheme *)
  gen_idx = Uint256 1;
  dragon1_gen = get_gen_val three zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val three zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen three zero;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* mutagenImutable *)
  gen_idx = Uint256 0;
  dragon1_gen = get_gen_val three zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val three zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen three zero;

  new_dragon_gen_image <- tmp_gen_image_fld;

  (* gen_battle - first part of attack gen from first dragons, second part from second, same for defence gen *)
  gen_battle1 = gen_battle1_param;
  d1_luck = builtin rem gen_battle1 ten2;
  gen_battle1 = builtin div gen_battle1 ten2;

  d1_gen_attack = builtin rem gen_battle1 ten20;
  gen_battle1 = builtin div gen_battle1 ten20;

  d1_gen_defence = builtin rem gen_battle1 ten20;
  gen_battle1 = builtin div gen_battle1 ten20;

  gen_battle2 = gen_battle2_param;
  d2_luck = builtin rem gen_battle2 ten2;
  gen_battle2 = builtin div gen_battle2 ten2;

  d2_gen_attack = builtin rem gen_battle2 ten20;
  gen_battle2 = builtin div gen_battle2 ten20;

  d2_gen_defence = builtin rem gen_battle2 ten20;
  gen_battle2 = builtin div gen_battle2 ten20;

  (* taking beginning of the gens from first dragon and adding mix of defence and attack and luck gens from both *)
  new_dragon_gen_battle = gen_battle1;

  d1_gen_attack_half1 = builtin rem d1_gen_attack ten10;
  d1_gen_attack_half2 = builtin div d1_gen_attack d1_gen_attack_half1;
  d1_gen_attack_half2 = builtin div d1_gen_attack ten10;
  d1_gen_defence_half1 = builtin rem d1_gen_defence ten10;
  d1_gen_defence_half2 = builtin div d1_gen_defence d1_gen_defence_half1;
  d1_gen_defence_half2 = builtin div d1_gen_defence ten10;

  d2_gen_attack_half1 = builtin rem d2_gen_attack ten10;
  d2_gen_attack_half2 = builtin div d2_gen_attack d2_gen_attack_half1;
  d2_gen_attack_half2 = builtin div d2_gen_attack ten10;
  d2_gen_defence_half1 = builtin rem d2_gen_defence ten10;
  d2_gen_defence_half2 = builtin div d2_gen_defence d2_gen_defence_half1;
  d2_gen_defence_half2 = builtin div d2_gen_defence ten10;

  (* adding defence *)
  new_dragon_gen_battle = builtin mul new_dragon_gen_battle ten10;

  new_dragon_gen_battle = builtin add new_dragon_gen_battle d1_gen_defence_half1;

  new_dragon_gen_battle = builtin mul new_dragon_gen_battle ten10;

  new_dragon_gen_battle = builtin add new_dragon_gen_battle d2_gen_defence_half2;

  (* adding attack *)
  new_dragon_gen_battle = builtin mul new_dragon_gen_battle ten10;

  new_dragon_gen_battle = builtin add new_dragon_gen_battle d1_gen_attack_half1;

  new_dragon_gen_battle = builtin mul new_dragon_gen_battle ten10;

  new_dragon_gen_battle = builtin add new_dragon_gen_battle d2_gen_attack_half2;

  (* adding luck *)
  new_luck = builtin add d1_luck d2_luck;
  new_luck = builtin div new_luck two;

  new_dragon_gen_battle = builtin mul new_dragon_gen_battle ten2;
  new_dragon_gen_battle = builtin add new_dragon_gen_battle new_luck;
  (* not more then 99 !!!!!! *)

  SendBreedResults new_dragon_gen_battle new_dragon_gen_image
end

procedure CheckIsSameDragon(token_id1: Uint256, token_id2: Uint256)
  is_same_dragon = builtin eq token_id1 token_id2;
  match is_same_dragon with
  | True =>
    err = CodeSameDragon;
    ThrowError err
  | False =>
  end
end

procedure CheckInWatingList(token_id: Uint256)
  token_inwatinglist <- exists waiting_list[token_id];
  match token_inwatinglist with
  | False =>
    err = CodeNotInWaitingList;
    ThrowError err
  | True =>
  end
end

procedure CheckStage(dragon_stage: Uint32)
  is_stage_egg = builtin lt dragon_stage one32;
  match is_stage_egg with
  | False =>
  | True =>
    err = CodeStageIncorrect;
    ThrowError err
  end
end

procedure CheckIsInitiatorOwner(dragon_owner: ByStr20)
  initiator_adr <- tmp_initiator_adr;
  is_owner = builtin eq dragon_owner initiator_adr;
  match is_owner with
  | True =>
  | False =>
    err = CodeNotAnOwner;
    ThrowError err
  end
end

transition BreedStart(who_id: Uint256, with_id: Uint256)
  (* this address will receive an egg *)
  tmp_initiator_adr := _sender;

  CheckIsSameDragon who_id with_id;
  CheckInWatingList with_id;

  dragon1_token_id = who_id;

  some_dragon_owner1 <-& contract_main.token_owners[who_id];
  dragon1_owner = option_adr zero_address some_dragon_owner1;

  some_stage1 <-& contract_main.token_stage[who_id];
  dragon1_stage = option_uint32 zero32 some_stage1;

  some_gen_image1 <-& contract_main.token_gen_image[who_id];
  dragon1_gen_image = option_uint256 zero256 some_gen_image1;

  some_gen_battle1 <-& contract_main.token_gen_battle[who_id];
  dragon1_gen_battle = option_uint256 zero256 some_gen_battle1;

  dragon2_token_id = with_id;

  some_dragon_owner2 <-& contract_main.token_owners[with_id];
  dragon2_owner = option_adr zero_address some_dragon_owner2;

  some_stage2 <-& contract_main.token_stage[with_id];
  dragon2_stage = option_uint32 zero32 some_stage2;

  some_gen_image2 <-& contract_main.token_gen_image[with_id];
  dragon2_gen_image = option_uint256 zero256 some_gen_image2;

  some_gen_battle2 <-& contract_main.token_gen_battle[with_id];
  dragon2_gen_battle = option_uint256 zero256 some_gen_battle2;

  (* check stage of dragons *)
  CheckStage dragon1_stage;
  CheckStage dragon2_stage;

  (* Need to check one of the dragons is in waiting list and other dragons owner is starting breeding *)
  initiator_adr <- tmp_initiator_adr;
  dragon1_owner_bool_eq = builtin eq dragon1_owner initiator_adr;

  breed_comis_prc <- breed_comis_prc_fld;

  (* removing dragons from waiting list, taking comission, send zlp for dragon owner *)
  match dragon1_owner_bool_eq with
  | True =>
    (* taking comission and send other amount to dragon2_owner *)
    zlp_price_opt <- waiting_list[dragon2_token_id];
    zlp_price = option_uint128 zero128 zlp_price_opt;
    zlp_comission = builtin mul zlp_price breed_comis_prc;
    zlp_comission = builtin div zlp_comission ten2_128;
    zlp_toowner = builtin sub zlp_price zlp_comission;

    zlp_wallet_addr <- zlp_wallet_address;
    TransferFromTo zlp_toowner _sender dragon2_owner;
    TransferFromTo zlp_comission _sender zlp_wallet_addr;

    delete waiting_list[dragon2_token_id]
  | False =>
    err = CodeNotAnOwner;
    ThrowError err
  end;

  (* start breed process with gens matching with this 2 dragons *)
  BreedDo dragon1_gen_image dragon1_gen_battle dragon2_gen_image dragon2_gen_battle
end

transition WaitListAddDel(token_id: Uint256, breed_price: Uint128)
  (* checking is sender owner of the dragon and adding or removing dragon to list*)
  some_stage <-& contract_main.token_stage[token_id];
  dragon_stage = option_uint32 zero32 some_stage;

  some_dragon_owner <-& contract_main.token_owners[token_id];
  dragon_owner = option_adr zero_address some_dragon_owner;

  CheckStage dragon_stage;
  CheckIsInitiatorOwner dragon_owner;

  (* breed_min_price_fld *)
  breed_min_price <- breed_min_price_fld;
  low_price_bool = builtin lt breed_price breed_min_price;
  match low_price_bool with
  | True =>
    tmp_breed_price_fld := breed_min_price
  | False =>
    tmp_breed_price_fld := breed_price
  end;
  breed_price_final <- tmp_breed_price_fld;

  token_inwatinglist <- exists waiting_list[token_id];
  match token_inwatinglist with
  | False =>
    waiting_list[token_id] := breed_price_final
  | True =>
    delete waiting_list[token_id]
  end
end

transition ChangeZLPWallet(addr: ByStr20)
  IsContractOwner;

  e = {
    _eventname: "ZLPWalletChanged";
    addr: addr
  };
  event e;

  zlp_wallet_address := addr
end

procedure RemoveFromBreed(token_id: Uint256)

  e = {
    _eventname: "RemovedFromWaitList";
    token_id: token_id
  };
  event e;

  delete waiting_list[token_id]
end

transition BatchRemoveFromBreed(token_id_list: List Uint256)
  IsContractOwner;

  forall token_id_list RemoveFromBreed
end

transition ChangeCommission(value: Uint128)
  IsContractOwner;

  e = {
    _eventname: "CommissionChanged";
    value: value
  };
  event e;

  breed_comis_prc_fld := value
end

transition ChangeMinPrice(value: Uint128)
  IsContractOwner;

  e = {
    _eventname: "ChnagedMinPrice";
    value: value
  };
  event e;

  breed_min_price_fld := value
end

transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition RecipientAcceptTransferFrom(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount: Uint128)
end
