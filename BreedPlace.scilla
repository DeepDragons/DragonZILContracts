scilla_version 0

import PairUtils
library DragonZILBreedLib

let fifty256 = Uint256 50
let two256 = Uint256 2
let one256 = Uint256 1
let zero256 = Uint256 0
let one_hundred256 = Uint256 100
let factor_24 = Uint256 1000000000000000000000000
let factor_18 = Uint256 1000000000000000000
let factor_12 = Uint256 1000000000000
let factor_6 = Uint256 1000000

let split =
  fun (gens: Uint256) =>
  fun (factor: Uint256) =>
    let n = builtin div gens factor in
      builtin rem n factor_6

let cut_gen =
  fun (g0: Uint256) =>
  fun (g1: Uint256) =>
  fun (n: Uint256) =>
  fun (f: Uint256) =>
    let is_half = builtin lt n fifty256 in
      match is_half with
      | True =>
        split g0 f
      | False =>
        split g1 f
      end

let concat_gens_image =
  fun (gen1: Uint256) =>
  fun (gen2: Uint256) =>
  fun (gen3: Uint256) =>
  fun (gen4: Uint256) =>
  fun (gen5: Uint256) =>
    let g1 = builtin mul gen1 factor_24 in
    let g2 = builtin mul gen2 factor_18 in
    let g3 = builtin mul gen3 factor_12 in
    let g4 = builtin mul gen4 factor_6 in
    let gens = builtin add g1 g2 in
    let gens = builtin add gens g3 in
    let gens = builtin add gens g4 in
      builtin add gens gen5

let combinate_image_gens =
  fun (gens0: Uint256) =>
  fun (gens1: Uint256) =>
  fun (random: Uint256) =>
    let n = builtin rem random one_hundred256 in
    let is_half = builtin lt n fifty256 in
    let gen5 = match is_half with
    | True => builtin rem gens0 factor_6
    | False => builtin rem gens1 factor_6
    end in
    let r_next = builtin div random two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen4 = cut_gen gens0 gens1 n factor_6 in
    let r_next = builtin div random two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen3 = cut_gen gens0 gens1 n factor_12 in
    let r_next = builtin div random two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen2 = cut_gen gens0 gens1 n factor_18 in
    let r_next = builtin div random two256 in
    let n = builtin rem r_next one_hundred256 in
    let is_half = builtin lt n fifty256 in
    let gen1 = match is_half with
    | True => builtin div gens0 factor_24
    | False => builtin div gens1 factor_24
    end in
      concat_gens_image gen1 gen2 gen3 gen4 gen5

contract DragonZILBreed
()

transition Test()
  gen0 = Uint256 77742020474220424231014055026;
  gen1 = Uint256 77723710180045032147252032241;
  r = Uint256 8842241887348121053642943213174811942429995499481999421099999928807063991194;
  gens = combinate_image_gens gen0 gen1 r;

  e = {
    _eventname: "Test";
    gens: gens
  };
  event e
end
