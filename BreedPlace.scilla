scilla_version 0

import ListUtils
(***************************************************)
(*               Associated library                *)
(***************************************************)
library BreedPlace

(* DragonZIL types *)
(* Custom ADT storing - token_id, owner, stage, token_uri, token_gen_battle, token_gen_image *)
type Dragon =
| Dragon of Uint256 ByStr20 Uint32 String Uint256 Uint256

(* Error events *)
type Error =
  | CodeNotAuthorised
  | CodeNotInWaitingList
  | CodeSameDragon
  | CodeNotAnOwner
  | CodeCallNotMainDzt
  | CodeStageIncorrect

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotAuthorised      => Int32 -1
      | CodeNotInWaitingList   => Int32 -2
      | CodeSameDragon         => Int32 -3
      | CodeNotAnOwner         => Int32 -4
      | CodeCallNotMainDzt     => Int32 -5
      | CodeStageIncorrect     => Int32 -6
      end
    in
    { _exception : "Error"; code : result_code }

let zero = Uint256 0
let zero32 = Uint32 0
let one = Uint256 1
let one32 = Uint32 1
let two = Uint256 2
let two32 = Uint32 2
let three = Uint256 3
let four = Uint256 4
let five = Uint256 5
let six = Uint256 6
let seven = Uint256 7
let eight = Uint256 8
let nine = Uint256 9
let ten = Uint256 10
let fourtyfive = Uint256 45
let ninety = Uint256 90
let ten2 = Uint256 100
let ten3 = Uint256 1000
let ten10 = Uint256 10000000000
let ten20 = Uint256 100000000000000000000

let zero_address = 0x0000000000000000000000000000000000000000
let dummy_str = ""
let default_stage = Uint32 0

let default_dragon = Dragon zero zero_address default_stage dummy_str zero zero

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint32 = @option_value Uint32
let option_dragon = @option_value Dragon

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let one_listid =
  fun (id : Uint256) =>
    let nil_listid = Nil {Uint256} in
    Cons {Uint256} id nil_listid

let two_listid =
  fun (id1 : Uint256) =>
  fun (id2 : Uint256) =>
    let listid_tmp = one_listid id2 in
    Cons {Uint256} id1 listid_tmp

let random =
  fun (entropy: Uint256) =>
  fun (block_number: BNum) =>
    let entropy_hash = builtin keccak256hash entropy in
    let blockhash = builtin keccak256hash block_number in
    let ehash = builtin concat entropy_hash blockhash in
    let hash = builtin keccak256hash ehash in
      builtin to_uint256 hash

(* first two gens have 3 digits, next two 1 digit, other 2 digits *)
let get_gen_val =
  fun (dignumval: Uint256) =>
  fun (skipnumval: Uint256) =>
  fun (genschain: Uint256) =>
  fun (num: Uint256) =>
    let skipnum = builtin add num skipnumval in
    let pow_num2 = builtin mul dignumval skipnum in
    let pow_num1 = builtin add dignumval pow_num2 in
    let pow_num2_32opt = builtin to_uint32 pow_num2 in
    let pow_num1_32opt = builtin to_uint32 pow_num1 in
    let pow_num2_32 = option_uint32 zero32 pow_num2_32opt in
    let pow_num1_32 = option_uint32 zero32 pow_num1_32opt in
    let divider1 = builtin pow ten pow_num1_32 in
    let divider2 = builtin pow ten pow_num2_32 in
    let rem_num1 = builtin rem genschain divider1 in
    let rem_num2 = builtin rem genschain divider2 in
    let genzeros = builtin sub rem_num1 rem_num2 in
      builtin div genzeros divider2

let calc_gens_tmp_new =
  fun (old_val: Uint256) =>
  fun (gen_num: Uint256) =>
  fun (check_with: Uint256) =>
  fun (val: Uint256) =>
    let gen_bool = builtin eq gen_num check_with in
    match gen_bool with
    | True => val
    | False => old_val
    end

let calc_gens_2opt_do =
  fun (gen_num: Uint256) =>
  fun (val1: Uint256) =>
  fun (val2: Uint256) =>
    let gen_bool = builtin lt gen_num five in
    match gen_bool with
    | True => val1
    | False => val2
    end

let calc_gens_2opt =
  fun (old_val: Uint256) =>
  fun (gen_num: Uint256) =>
  fun (check_with: Uint256) =>
  fun (gen_num2: Uint256) =>
  fun (val1: Uint256) =>
  fun (val2: Uint256) =>
    let gen_bool = builtin eq gen_num check_with in
    match gen_bool with
    | True => calc_gens_2opt_do gen_num2 val1 val2
    | False => old_val
    end

let get_dragon_token_id =
  fun (dragon: Dragon) =>
    match dragon with
    | Dragon token_id owner stage token_uri token_gen_battle token_gen_image =>
      token_id
    end

let get_dragon_owner =
  fun (dragon: Dragon) =>
    match dragon with
    | Dragon token_id owner stage token_uri token_gen_battle token_gen_image =>
      owner
    end

let get_dragon_stage =
  fun (dragon: Dragon) =>
    match dragon with
    | Dragon token_id owner stage token_uri token_gen_battle token_gen_image =>
      stage
    end

let get_dragon_gen_battle =
  fun (dragon: Dragon) =>
    match dragon with
    | Dragon token_id owner stage token_uri token_gen_battle token_gen_image =>
      token_gen_battle
    end

let get_dragon_gen_image =
  fun (dragon: Dragon) =>
    match dragon with
    | Dragon token_id owner stage token_uri token_gen_battle token_gen_image =>
      token_gen_image
    end

let build_dragon =
  fun (token_id: Uint256) =>
  fun (some_token_owner: ByStr20) =>
  fun (some_token_uri: String) =>
  fun (some_token_gen_battle: Uint256) =>
  fun (some_token_gen_image: Uint256) =>
  fun (some_token_stage: Uint32) =>
    let owner = some_token_owner in
    let uri = some_token_uri in
    let gen_battle = some_token_gen_battle in
    let gen_image = some_token_gen_image in
    let stage = some_token_stage in
      Dragon token_id owner stage uri gen_battle gen_image

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract BreedPlace

(*  Parameters *)
(contract_owner: ByStr20,
 main_dzt : ByStr20, store_zlp: ByStr20)

(* Mutable fields *)
field waiting_list: Map Uint256 Uint256 = Emp Uint256 Uint256

field entropy : Uint256 = Uint256 42

field tmp_initiator_adr : ByStr20 = 0x0000000000000000000000000000000000000000
field tmp_token_id : Uint256 = Uint256 0
field tmp_gen_image_fld : Uint256 = Uint256 0

field tmp: List (Dragon) = Nil {Dragon}

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure SendBreedResults(new_dragon_gen_battle: Uint256, new_dragon_gen_image: Uint256)
  (* call Birth, owner of new egg will be the owner of the dragon whos id is stored in tmp_token_id *)

  token_owner <- tmp_initiator_adr;
  some_tmp <- tmp;

  (* it is new dragon *)
  token_id = zero;

  dragon = build_dragon token_id token_owner dummy_str new_dragon_gen_battle new_dragon_gen_image default_stage;
  new_tmp = Cons {Dragon} dragon some_tmp;

  e = {
    _eventname : "BreedResults";
    new_dragon_gen_battle: new_dragon_gen_battle;
    new_dragon_gen_image: new_dragon_gen_image;
    dragon: dragon;
    new_tmp: new_tmp
  };
  event e;

  birth_call = {
    _tag: "GiveBirth";
    _recipient: main_dzt;
    _amount: Uint128 0;
    dragons: new_tmp
  };
  msgs = one_msg birth_call;
  send msgs
end

procedure ChangeImageGen(dignumval: Uint256, skipnumval: Uint256, new_gen_idx: Uint256, new_gen: Uint256)
  (* first two gens have 3 digits, next two 1 digit, other 2 digits *)
  genschain <- tmp_gen_image_fld;

  skipnum = builtin add new_gen_idx skipnumval;
  pow_num2 = builtin mul dignumval skipnum;
  pow_num1 = builtin add dignumval pow_num2;
  pow_num2_32opt = builtin to_uint32 pow_num2;
  pow_num1_32opt = builtin to_uint32 pow_num1;
  pow_num2_32 = option_uint32 zero32 pow_num2_32opt;
  pow_num1_32 = option_uint32 zero32 pow_num1_32opt;
  divider1 = builtin pow ten pow_num1_32;
  divider2 = builtin pow ten pow_num2_32;
  rem_num1 = builtin rem genschain divider1;
  rem_num2 = builtin rem genschain divider2;
  genchain_pre = builtin sub genschain rem_num1;

  new_genzeros = builtin mul new_gen divider2;
  new_genschain = builtin add genchain_pre new_genzeros;
  new_genschain = builtin add new_genschain rem_num2;

  e = {
    _eventname : "ChangeImageGen";
    new_gen_idx: new_gen_idx;
    new_gen: new_gen;
    rem_num1: rem_num1;
    rem_num2: rem_num2;
    genchain_pre: genchain_pre;
    genschain: genschain;
    new_genschain: new_genschain
  };
  event e;

  tmp_gen_image_fld := new_genschain
end

procedure GenerateImageGen(rand: Uint256)
  random = rand;
  (* gens init for current token *)
  gens_image_ = Uint256 777;
  gen_tmp = Uint256 0;

  (* image gen Aura - 5 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three zero;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six one;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight three;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 four five;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Aura *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Horns - 7 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five two;
  gen = calc_gens_tmp_new gen gen_rand six three;
  gen = calc_gens_tmp_new gen gen_rand seven four;
  gen = calc_gens_tmp_new gen gen_rand eight five;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 six seven;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Horns *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Scales - 4 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three zero;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six one;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight two;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 three four;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Scales *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Spots - 9 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three two;
  gen = calc_gens_tmp_new gen gen_rand four three;
  gen = calc_gens_tmp_new gen gen_rand five four;
  gen = calc_gens_tmp_new gen gen_rand six five;
  gen = calc_gens_tmp_new gen gen_rand seven six;
  gen = calc_gens_tmp_new gen gen_rand eight seven;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 eight nine;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Spots *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Tail - 8 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four two;
  gen = calc_gens_tmp_new gen gen_rand five three;
  gen = calc_gens_tmp_new gen gen_rand six four;
  gen = calc_gens_tmp_new gen gen_rand seven five;
  gen = calc_gens_tmp_new gen gen_rand eight six;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 seven eight;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Tail *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Wings - 5 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six two;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight three;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 four five;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Wings *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Spins - 4 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five two;
  gen = calc_gens_tmp_new gen gen_rand six two;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight two;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 three four;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Spins *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Body - 3 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero one;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six one;
  gen = calc_gens_tmp_new gen gen_rand seven one;
  gen = calc_gens_tmp_new gen gen_rand eight one;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 two three;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Body *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Eyes - 9 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero one;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three two;
  gen = calc_gens_tmp_new gen gen_rand four three;
  gen = calc_gens_tmp_new gen gen_rand five four;
  gen = calc_gens_tmp_new gen gen_rand six five;
  gen = calc_gens_tmp_new gen gen_rand seven six;
  gen = calc_gens_tmp_new gen gen_rand eight seven;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 eight nine;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Eyes *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Head - 5 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero one;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six one;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight three;

  (* 5prc cases *)
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;
  gen_rand2 = builtin rem random ten;
  gen = calc_gens_2opt gen gen_rand nine gen_rand2 four five;
  gen_rand = gen_rand2;

  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Claws *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* color scheme *)
  gen_rand = builtin rem random ten3;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten3;
  gen_rand = builtin div gen_rand four;
  i = builtin mul gens_image_ ten3;
  i2 = builtin add i gen_rand;
  gens_image_ = i2;

  (* mutagenImutable *)
  (* last gen no need to move to next digit *)
  gen_rand = builtin rem random ten3;
  gen_rand = builtin div gen_rand four;
  i = builtin mul gens_image_ ten3;
  i2 = builtin add i gen_rand;
  gens_image_ = i2;

  e = {
    _eventname : "GenerateImageGen";
    rand: rand;
    random: random;
    new_dragon_gen_image: gens_image_
  };
  event e;

  (* store gens to temp field *)
  tmp_gen_image_fld := gens_image_
end


procedure ChangeImageGenProc(gen_rand: Uint256, gen_idx: Uint256, dragon1_gen: Uint256, dragon2_gen: Uint256, dignumval: Uint256, skipnumval: Uint256)
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  e = {
    _eventname : "ChangeImageGenProc";
    dragon1_gen: dragon1_gen;
    dragon2_gen: dragon2_gen;
    gen_bool_90: gen_bool_90;
    gen_bool_45: gen_bool_45;
    gen_rand: gen_rand;
    gen_idx: gen_idx;
    dignumval: dignumval;
    skipnumval: skipnumval
  };
  event e;

  match gen_bool_90 with
  | True =>
    match gen_bool_45 with
    | True =>
      ChangeImageGen dignumval skipnumval gen_idx dragon1_gen
    | False =>
      ChangeImageGen dignumval skipnumval gen_idx dragon2_gen
    end
  | False =>
    (* no need to change, we already have new random type *)
  end
end

procedure BreedDo(gen_image1_param: Uint256, gen_battle1_param: Uint256, gen_image2_param: Uint256, gen_battle2_param: Uint256)
  (* generating random values *)
  entropyNumber <- entropy;
  current_block <- & BLOCKNUMBER;
  random = random entropyNumber current_block;
  entropy := random;

  random_ = builtin div random ten10;
  GenerateImageGen random_;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "BreedDo";
    gen_image1_param: gen_image1_param;
    gen_battle1_param: gen_battle1_param;
    gen_image2_param: gen_image2_param;
    gen_battle2_param: gen_battle2_param;
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* most of visual gens have 2 parts - type (0-9) and color(0-4) *)
  (* head have 1 digit *)
  (* claws have 1 digit *)
  (* Color Scheme have 3 digits *)
  (* MutagenImutable have 3 digits *)
  (* e.g. 777 03 03 43 31 14 33 44 11 73 1 4 110 158 *)
  (* Aura-12   Horns-11   Scales-10   Spots-9   Tail-8   Wings-7 *)
  (* Spins-6   Body-5   Eyes-4   Head-3   Claws-2   Color Scheme-1   MutagenImutable-0 *)

  (* gens init for current token *)
  gen_tmp = Uint256 0;

  (* we already have new dragons image gens generated *)
  (* 45% chances - new gen will be from dragon1, 45% chances - new gen will be from dragon2 *)
  (* 10% chances - will be random *)

  (* image gen Aura - 5 types *)
  (* image gen Color Aura *)
  gen_idx = Uint256 12;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  random = builtin div random ten2;
  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  (* ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen dignumval: Uint256, skipnumval: Uint256 *)
  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_aura";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* image gen Horns - 7 types *)
  (* image gen Color Horns *)
  gen_idx = Uint256 11;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_Horns";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* image gen Scales - 4 types *)
  (* image gen Color Scales *)
  gen_idx = Uint256 10;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_Scales";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* image gen Spots - 9 types *)
  (* image gen Color Spots *)
  gen_idx = Uint256 9;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_Spots";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* image gen Tail - 8 types *)
  (* image gen Color Tail *)
  gen_idx = Uint256 8;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_Tail";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* image gen Wings - 5 types *)
  (* image gen Color Wings *)
  gen_idx = Uint256 7;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_Wings";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* image gen Spins - 4 types *)
  (* image gen Color Spins *)
  gen_idx = Uint256 6;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_Spins";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* image gen Body - 3 types *)
  (* image gen Color Body *)
  gen_idx = Uint256 5;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_Body";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* image gen Eyes - 9 types *)
  (* image gen Color Eyes *)
  gen_idx = Uint256 4;
  dragon1_gen = get_gen_val two zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val two zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen two zero;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_Eyes";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* image gen Head - 5 types *)
  gen_idx = Uint256 3;
  dragon1_gen = get_gen_val one four gen_image1_param gen_idx;
  dragon2_gen = get_gen_val one four gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen one four;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_head";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* image gen Color Claws *)
  gen_idx = Uint256 2;
  dragon1_gen = get_gen_val one four gen_image1_param gen_idx;
  dragon2_gen = get_gen_val one four gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen one four;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_claws";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* color scheme *)
  gen_idx = Uint256 1;
  dragon1_gen = get_gen_val three zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val three zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen three zero;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_color_scheme";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* mutagenImutable *)
  gen_idx = Uint256 0;
  dragon1_gen = get_gen_val three zero gen_image1_param gen_idx;
  dragon2_gen = get_gen_val three zero gen_image2_param gen_idx;

  gen_rand = builtin rem random ten2;
  random = builtin div random ten2;
  gen_bool_90 = builtin lt gen_rand ninety;
  gen_bool_45 = builtin lt gen_rand fourtyfive;

  ChangeImageGenProc gen_rand gen_idx dragon1_gen dragon2_gen three zero;

  new_dragon_gen_image <- tmp_gen_image_fld;
  e = {
    _eventname : "gen_mutagenImutable";
    new_dragon_gen_image: new_dragon_gen_image
  };
  event e;

  (* gen_battle - first part of attack gen from first dragons, second part from second, same for defence gen *)
  gen_battle1 = gen_battle1_param;
  d1_luck = builtin rem gen_battle1 ten2;
  gen_battle1 = builtin div gen_battle1 ten2;

  d1_gen_attack = builtin rem gen_battle1 ten20;
  gen_battle1 = builtin div gen_battle1 ten20;

  d1_gen_defence = builtin rem gen_battle1 ten20;
  gen_battle1 = builtin div gen_battle1 ten20;

  gen_battle2 = gen_battle2_param;
  d2_luck = builtin rem gen_battle2 ten2;
  gen_battle2 = builtin div gen_battle2 ten2;

  d2_gen_attack = builtin rem gen_battle2 ten20;
  gen_battle2 = builtin div gen_battle2 ten20;

  d2_gen_defence = builtin rem gen_battle2 ten20;
  gen_battle2 = builtin div gen_battle2 ten20;

  (* taking beginning of the gens from first dragon and adding mix of defence and attack and luck gens from both *)
  new_dragon_gen_battle = gen_battle1;

  d1_gen_attack_half1 = builtin rem d1_gen_attack ten10;
  d1_gen_attack_half2 = builtin div d1_gen_attack d1_gen_attack_half1;
  d1_gen_attack_half2 = builtin div d1_gen_attack ten10;
  d1_gen_defence_half1 = builtin rem d1_gen_defence ten10;
  d1_gen_defence_half2 = builtin div d1_gen_defence d1_gen_defence_half1;
  d1_gen_defence_half2 = builtin div d1_gen_defence ten10;

  d2_gen_attack_half1 = builtin rem d2_gen_attack ten10;
  d2_gen_attack_half2 = builtin div d2_gen_attack d2_gen_attack_half1;
  d2_gen_attack_half2 = builtin div d2_gen_attack ten10;
  d2_gen_defence_half1 = builtin rem d2_gen_defence ten10;
  d2_gen_defence_half2 = builtin div d2_gen_defence d2_gen_defence_half1;
  d2_gen_defence_half2 = builtin div d2_gen_defence ten10;

  e = {
    _eventname : "gen_battle_halfs";
    d1_gen_attack_half1: d1_gen_attack_half1;
    d1_gen_attack_half2: d1_gen_attack_half2;
    d1_gen_defence_half1: d1_gen_defence_half1;
    d1_gen_defence_half2: d1_gen_defence_half2;
    d2_gen_attack_half1: d2_gen_attack_half1;
    d2_gen_attack_half2: d2_gen_attack_half2;
    d2_gen_defence_half1: d2_gen_defence_half1;
    d2_gen_defence_half2: d2_gen_defence_half2;
    new_dragon_gen_battle: new_dragon_gen_battle
  };
  event e;

  (* adding defence *)
  new_dragon_gen_battle = builtin mul new_dragon_gen_battle ten10;
  e = {
    _eventname : "new_dragon_gen_battle_step1";
    new_dragon_gen_battle: new_dragon_gen_battle
  };
  event e;

  new_dragon_gen_battle = builtin add new_dragon_gen_battle d1_gen_defence_half1;
  e = {
    _eventname : "new_dragon_gen_battle_step2";
    new_dragon_gen_battle: new_dragon_gen_battle
  };
  event e;

  new_dragon_gen_battle = builtin mul new_dragon_gen_battle ten10;
  e = {
    _eventname : "new_dragon_gen_battle_step3";
    new_dragon_gen_battle: new_dragon_gen_battle
  };
  event e;

  new_dragon_gen_battle = builtin add new_dragon_gen_battle d2_gen_defence_half2;
  e = {
    _eventname : "new_dragon_gen_battle_step4";
    new_dragon_gen_battle: new_dragon_gen_battle
  };
  event e;

  (* adding attack *)
  new_dragon_gen_battle = builtin mul new_dragon_gen_battle ten10;
  e = {
    _eventname : "new_dragon_gen_battle_step5";
    new_dragon_gen_battle: new_dragon_gen_battle
  };
  event e;

  new_dragon_gen_battle = builtin add new_dragon_gen_battle d1_gen_attack_half1;
  e = {
    _eventname : "new_dragon_gen_battle_step6";
    new_dragon_gen_battle: new_dragon_gen_battle
  };
  event e;

  new_dragon_gen_battle = builtin mul new_dragon_gen_battle ten10;
  e = {
    _eventname : "new_dragon_gen_battle_step7";
    new_dragon_gen_battle: new_dragon_gen_battle
  };
  event e;

  new_dragon_gen_battle = builtin add new_dragon_gen_battle d2_gen_attack_half2;
  e = {
    _eventname : "new_dragon_gen_battle_step8";
    new_dragon_gen_battle: new_dragon_gen_battle
  };
  event e;

  (* adding luck *)
  new_luck = builtin add d1_luck d2_luck;
  new_luck = builtin div new_luck two;
  e = {
    _eventname : "new_luck";
    new_luck: new_luck
  };
  event e;

  new_dragon_gen_battle = builtin mul new_dragon_gen_battle ten2;
  new_dragon_gen_battle = builtin add new_dragon_gen_battle new_luck;
  (* not more then 99 !!!!!! *)
  e = {
    _eventname : "new_dragon_gen_battle_step8";
    new_dragon_gen_battle: new_dragon_gen_battle
  };
  event e;

  SendBreedResults new_dragon_gen_battle new_dragon_gen_image
end

procedure CheckIsSameDragon(token_id1: Uint256, token_id2: Uint256)
  is_same_dragon = builtin eq token_id1 token_id2;
  match is_same_dragon with
  | True =>
    err = CodeSameDragon;
    ThrowError err
  | False =>
  end
end

procedure CheckInWatingList(token_id: Uint256)
  token_inwatinglist <- exists waiting_list[token_id];
  match token_inwatinglist with
  | False =>
    err = CodeNotInWaitingList;
    ThrowError err
  | True =>
  end
end

procedure CheckStage(dragon_stage: Uint32)
  is_stage_egg = builtin lt dragon_stage one32;
  match is_stage_egg with
  | False =>
  | True =>
    err = CodeStageIncorrect;
    ThrowError err
  end
end

procedure CheckIsInitiatorOwner(dragon_owner: ByStr20)
  initiator_adr <- tmp_initiator_adr;
  is_owner = builtin eq dragon_owner initiator_adr;
  match is_owner with
  | True =>
  | False =>
    err = CodeNotAnOwner;
    ThrowError err
  end
end

procedure BreedPrepare(dragons: List Dragon)
  dragons_nth = @list_nth Dragon;
  dragon_one_opt = dragons_nth zero32 dragons;
  dragon_two_opt = dragons_nth one32 dragons;

  dragon_one = option_dragon default_dragon dragon_one_opt;
  dragon_two = option_dragon default_dragon dragon_two_opt;

  dragon1_token_id = get_dragon_token_id dragon_one;
  dragon1_owner = get_dragon_owner dragon_one;
  dragon1_stage = get_dragon_stage dragon_one;
  dragon1_gen_image = get_dragon_gen_image dragon_one;
  dragon1_gen_battle = get_dragon_gen_battle dragon_one;

  dragon2_token_id = get_dragon_token_id dragon_two;
  dragon2_owner = get_dragon_owner dragon_two;
  dragon2_stage = get_dragon_stage dragon_two;
  dragon2_gen_image = get_dragon_gen_image dragon_two;
  dragon2_gen_battle = get_dragon_gen_battle dragon_two;

  (* check stage of dragons *)
  CheckStage dragon1_stage;
  CheckStage dragon2_stage;





  (* right now we have fixed price for breeding *)
  (* need to implement functionality for owners to set price for breeding they want *)
  (* todo!!! *)






  (* Need to check one of the dragons is in waiting list and other dragons owner is starting fight *)
  initiator_adr <- tmp_initiator_adr;
  dragon1_owner_bool_eq = builtin eq dragon1_owner initiator_adr;
  dragon2_owner_bool_eq = builtin eq dragon2_owner initiator_adr;

      (* minimum price 25 zlp for breeding need to add transition *)



      zlp_toowner = Uint128 180000000000000000000;
      zlp_comission = Uint128 20000000000000000000;





  (* removing dragons from waiting list, taking comission, send zlp for dragon owner *)
  token1_inwatinglist <- exists waiting_list[dragon1_token_id];
  match token1_inwatinglist with
  | False =>
  | True =>
    match dragon2_owner_bool_eq with
    | True =>
      (* taking comission and send other amount to dragon2_owner *)





      transfer_call = {
        _tag: "TransferZLPFrom";
        _recipient: store_zlp;
        _amount: Uint128 0;
        from: dragon1_owner;
        to: dragon2_owner;
        amount: zlp_toowner;
        commission: zlp_comission
      };
      msgs = one_msg transfer_call;
      send msgs;

      delete waiting_list[dragon1_token_id]
    | False =>
      err = CodeNotAnOwner;
      ThrowError err
    end
  end;
  token2_inwatinglist <- exists waiting_list[dragon2_token_id];
  match token2_inwatinglist with
  | False =>
  | True =>
    match dragon2_owner_bool_eq with
    | True =>
      (* taking comission and send other amount to dragon1_owner *)




      transfer_call = {
        _tag: "TransferZLPFrom";
        _recipient: store_zlp;
        _amount: Uint128 0;
        from: dragon1_owner;
        to: dragon2_owner;
        amount: zlp_toowner;
        commission: zlp_comission
      };
      msgs = one_msg transfer_call;
      send msgs;

      delete waiting_list[dragon2_token_id]
    | False =>
      err = CodeNotAnOwner;
      ThrowError err
    end
  end;

  (* start breed process with gens matching with this 2 dragons *)
  BreedDo dragon1_gen_image dragon1_gen_battle dragon2_gen_image dragon2_gen_battle
end

procedure PlaceToWaitlist(dragons: List Dragon)
  dragons_nth = @list_nth Dragon;
  dragon_one_opt = dragons_nth zero32 dragons;
  dragon_one = option_dragon default_dragon dragon_one_opt;
  dragon1_owner = get_dragon_owner dragon_one;
  dragon1_stage = get_dragon_stage dragon_one;

  CheckStage dragon1_stage;
  CheckIsInitiatorOwner dragon1_owner;

  (* Owner wanted to put dragon to waiting list *)
  initiator_adr <- tmp_initiator_adr;
  token_id <- tmp_token_id;
  token_inwatinglist <- exists waiting_list[token_id];
  match token_inwatinglist with
  | False =>
    waiting_list[token_id] := token_id
  | True =>
    delete waiting_list[token_id]
  end
end

transition GetDragonsCallBack(dragons: List Dragon)
  (* need to check is it called from main contract *)
  is_main_dzt_call = builtin eq _sender main_dzt;
  match is_main_dzt_call with
  | False =>
    err = CodeCallNotMainDzt;
    ThrowError err
  | True =>
  end;

  dragons_length = @list_length Dragon;
  dragons_num = dragons_length dragons;
  action_waitlist = builtin eq dragons_num one32;
  action_breed = builtin eq dragons_num two32;
  match action_waitlist with
  | False =>
  | True =>
    PlaceToWaitlist dragons
  end;
  match action_breed with
  | False =>
  | True =>
    BreedPrepare dragons
  end
end

transition BreedStart(who_id: Uint256, with_id: Uint256)
  tmp_initiator_adr := _sender;
  (* this dragon will receive an egg *)
  tmp_token_id := with_id;

  CheckIsSameDragon who_id with_id;
  CheckInWatingList with_id;

  ids = two_listid who_id with_id;
  getdragons_call = {
    _tag: "GetDragons";
    _recipient: main_dzt;
    _amount: Uint128 0;
    ids: ids
  };
  msgs = one_msg getdragons_call;
  send msgs
end

transition WaitListAddDel(token_id: Uint256)
  (* checking is sender owner of the dragon and adding or removing dragon to list*)
  tmp_initiator_adr := _sender;
  tmp_token_id := token_id;

  ids = one_listid token_id;
  getdragons_call = {
    _tag: "GetDragons";
    _recipient: main_dzt;
    _amount: Uint128 0;
    ids: ids
  };
  msgs = one_msg getdragons_call;
  send msgs
end
