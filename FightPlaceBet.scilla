scilla_version 0

import ListUtils
(***************************************************)
(*               Associated library                *)
(***************************************************)
library FightPlaceBet

(* Error events *)
type Error =
  | CodeNotInWaitingList
  | CodeSameDragon
  | CodeNotAnOwner
  | CodeStageIncorrect
  | CodeNotContractOwner
  | CodeBothInWaitingList
  | CodePauseNotPause

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotInWaitingList   => Int32 -1
      | CodeSameDragon         => Int32 -2
      | CodeNotAnOwner         => Int32 -3
      | CodeStageIncorrect     => Int32 -4
      | CodeNotContractOwner   => Int32 -5
      | CodeBothInWaitingList  => Int32 -6
      | CodePauseNotPause      => Int32 -7
      end
    in
    { _exception : "Error"; code : result_code }

let zero32 = Uint32 0
let zero128 = Uint128 0
let zero256 = Uint256 0
let one = Uint256 1
let one32 = Uint32 1
let two = Uint256 2
let five = Uint256 5
let ten = Uint256 10
let ten2 = Uint256 100
let ten20 = Uint256 100000000000000000000

let zero_address = 0x0000000000000000000000000000000000000000

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint32 = @option_value Uint32
let option_uint128 = @option_value Uint128
let option_uint256 = @option_value Uint256
let option_adr = @option_value ByStr20

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let random =
  fun (entropy: Uint256) =>
  fun (block_number: BNum) =>
    let entropy_hash = builtin keccak256hash entropy in
    let blockhash = builtin keccak256hash block_number in
    let ehash = builtin concat entropy_hash blockhash in
    let hash = builtin keccak256hash ehash in
      builtin to_uint256 hash

let get_gen_val =
  fun (genschain: Uint256) =>
  fun (num: Uint256) =>
    let pow_num2 = builtin mul two num in
    let pow_num1 = builtin add two pow_num2 in
    let pow_num2_32opt = builtin to_uint32 pow_num2 in
    let pow_num1_32opt = builtin to_uint32 pow_num1 in
    let pow_num2_32 = option_uint32 zero32 pow_num2_32opt in
    let pow_num1_32 = option_uint32 zero32 pow_num1_32opt in
    let divider1 = builtin pow ten pow_num1_32 in
    let divider2 = builtin pow ten pow_num2_32 in
    let rem_num1 = builtin rem genschain divider1 in
    let rem_num2 = builtin rem genschain divider2 in
    let genzeros = builtin sub rem_num1 rem_num2 in
      builtin div genzeros divider2

let get_avg_atc_battle_gen =
  fun (genschain: Uint256) =>
    let genschain_val = genschain in
    let genschain_val = builtin div genschain_val ten2 in
    let a1 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a2 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a3 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a4 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a5 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a6 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a7 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a8 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a9 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a10 = builtin rem genschain_val ten2 in
    let sum = builtin add a1 a2 in
    let sum = builtin add sum a3 in
    let sum = builtin add sum a4 in
    let sum = builtin add sum a5 in
    let sum = builtin add sum a6 in
    let sum = builtin add sum a7 in
    let sum = builtin add sum a8 in
    let sum = builtin add sum a9 in
    let sum = builtin add sum a10 in
    builtin div sum ten

let get_avg_def_battle_gen =
  fun (genschain: Uint256) =>
    let genschain_val = genschain in
    let genschain_val = builtin div genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten20 in
    let a1 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a2 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a3 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a4 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a5 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a6 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a7 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a8 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a9 = builtin rem genschain_val ten2 in
    let genschain_val = builtin div genschain_val ten2 in
    let a10 = builtin rem genschain_val ten2 in
    let sum = builtin add a1 a2 in
    let sum = builtin add sum a3 in
    let sum = builtin add sum a4 in
    let sum = builtin add sum a5 in
    let sum = builtin add sum a6 in
    let sum = builtin add sum a7 in
    let sum = builtin add sum a8 in
    let sum = builtin add sum a9 in
    let sum = builtin add sum a10 in
    builtin div sum ten

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract FightPlaceBet

(*  Parameters *)
(
  contract_owner: ByStr20,
  contract_zlp: ByStr20,
  contract_main: ByStr20 with contract
    field token_gen_battle: Map Uint256 Uint256,
    field token_stage: Map Uint256 Uint32,
    field token_owners: Map Uint256 ByStr20
  end
)

field pause: Uint32 = zero32

(* Mutable fields *)
field waiting_list: Map Uint256 Uint128 = Emp Uint256 Uint128

field entropy : Uint256 = Uint256 42

field tmp_initiator_adr : ByStr20 = zero_address
field tmp_token_id : Uint256 = Uint256 0

field tmp_fight_price_fld : Uint128 = Uint128 0
field tmp_dragon1_owner_adr : ByStr20 = zero_address
field tmp_dragon2_owner_adr : ByStr20 = zero_address

field super_dragon_avg_fld : Uint256 = Uint256 70

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure TransferFromTo(amount: Uint128, from: ByStr20, to: ByStr20)
  is_zero = builtin eq zero128 amount;

  match is_zero with
  | False =>
    call_transfer_zlp = {
      _tag: "TransferFrom";
      _recipient: contract_zlp;
      _amount: Uint128 0;
      from: from;
      to: to;
      amount: amount
    };
    msgs = one_msg call_transfer_zlp;
    send msgs
  | True =>
  end
end

procedure CallTransfer(to: ByStr20, amount: Uint128)
  msg_transfer = {
    _tag: "Transfer";
    _recipient: contract_zlp;
    _amount: zero128;
    to: to;
    amount: amount
  };
  msgs = one_msg msg_transfer;
  send msgs
end

procedure AfterFightWinLose(num_winner: Uint256, token_id_winner: Uint256, gen_battle_winner_param: Uint256, token_id_loser: Uint256, gen_battle_loser_param: Uint256)
  tmp_token_id_val <- tmp_token_id;

  fight_price <- tmp_fight_price_fld;

  dragon1_owner_adr <- tmp_dragon1_owner_adr;
  dragon2_owner_adr <- tmp_dragon2_owner_adr;

  e = {
    _eventname : "AfterFightWinLose";
    token_id_winner: token_id_winner;
    token_id_loser: token_id_loser
  };
  event e;

  token_winner_in_waitlist_bool = builtin eq tmp_token_id_val token_id_winner;
  dragon1_win_bool = builtin eq num_winner one;
  two128 = Uint128 2;
  fight_pricex2 = builtin mul fight_price two128;
  match token_winner_in_waitlist_bool with
  | True =>
    match dragon1_win_bool with
    | True =>
      CallTransfer dragon1_owner_adr fight_pricex2
    | False =>
      CallTransfer dragon2_owner_adr fight_pricex2
    end
  | False =>
    match dragon1_win_bool with
    | True =>
      CallTransfer dragon1_owner_adr fight_pricex2
    | False =>
      CallTransfer dragon2_owner_adr fight_pricex2
    end
  end
end

procedure AfterFightDraw(token_id1: Uint256, gen_battle1: Uint256, token_id2: Uint256, gen_battle2: Uint256)
  d1_luck = builtin rem gen_battle1 ten2;
  d2_luck = builtin rem gen_battle2 ten2;

  luck_res_bool_eq = builtin eq d1_luck d2_luck;
  luck_res_bool_lt = builtin lt d1_luck d2_luck;
  match luck_res_bool_eq with
  | True =>
    (* SendFightsResultsDraw token_id1 token_id2 *)
    random <- entropy;
    random_draw = builtin div random ten20;
    random_draw = builtin rem random_draw ten;
    luck_draw = builtin lt random_draw five;
    match luck_draw with
    | True =>
      AfterFightWinLose two token_id2 gen_battle2 token_id1 gen_battle1
    | False =>
      AfterFightWinLose one token_id1 gen_battle1 token_id2 gen_battle2
    end
  | False =>
    match luck_res_bool_lt with
    | True =>
      AfterFightWinLose two token_id2 gen_battle2 token_id1 gen_battle1
    | False =>
      AfterFightWinLose one token_id1 gen_battle1 token_id2 gen_battle2
    end
  end
end

procedure FightDo(token_id1: Uint256, gen_battle1_param: Uint256, token_id2: Uint256, gen_battle2_param: Uint256)
  (* generating random values *)
  entropyNumber <- entropy;
  current_block <- & BLOCKNUMBER;
  random = random entropyNumber current_block;
  entropy := random;

  d1_random_attack = builtin rem random ten;
  random = builtin div random ten;

  d1_random_defence = builtin rem random ten;
  random = builtin div random ten;

  d2_random_attack = builtin rem random ten;
  random = builtin div random ten;

  d2_random_defence = builtin rem random ten;
  random = builtin div random ten;

  random_luck = builtin rem random ten2;

  (* calculating gens *)
  (* last 2 digits - gen luck *)
  (* next 20 digits - gen attack *)
  (* next 20 digits - gen defence *)
  (* other are reserved *)
  gen_battle1 = gen_battle1_param;
  d1_luck = builtin rem gen_battle1 ten2;
  gen_battle1 = builtin div gen_battle1 ten2;

  d1_gen_attack = builtin rem gen_battle1 ten20;
  gen_battle1 = builtin div gen_battle1 ten20;

  d1_gen_defence = builtin rem gen_battle1 ten20;

  gen_battle2 = gen_battle2_param;
  d2_luck = builtin rem gen_battle2 ten2;
  gen_battle2 = builtin div gen_battle2 ten2;

  d2_gen_attack = builtin rem gen_battle2 ten20;
  gen_battle2 = builtin div gen_battle2 ten20;

  d2_gen_defence = builtin rem gen_battle2 ten20;

  (* get gens patricipating in fights *)
  d1_attack = get_gen_val d1_gen_attack d1_random_attack;
  d1_defence = get_gen_val d1_gen_defence d1_random_defence;

  d2_attack = get_gen_val d2_gen_attack d2_random_attack;
  d2_defence = get_gen_val d2_gen_defence d2_random_defence;

  (* fight process - matching gens *)
  luck_bool_eq = builtin eq d1_luck d2_luck;
  luck_bool_neg = builtin lt d1_luck d2_luck;

  res1_bool_eq = builtin eq d1_defence d2_attack;
  (* true - win d2, false - win d1 *)
  res1_bool_neg = builtin lt d1_defence d2_attack;

  res2_bool_eq = builtin eq d2_defence d1_attack;
  (* true - win d1, false - win d2 *)
  res2_bool_neg = builtin lt d2_defence d1_attack;

  match res1_bool_eq with
  | True =>
    match res2_bool_eq with
    | True =>
      (* draw need check luck *)
      match luck_bool_eq with
      | True =>
        (* draw *)
        AfterFightDraw token_id1 gen_battle1_param token_id2 gen_battle2_param
      | False =>
        match luck_bool_neg with
        | True =>
          (* d2 win *)
          AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
        | False =>
          (* d1 win *)
          AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
        end
      end
    | False =>
      match res2_bool_neg with
      | True =>
        (* d1 win *)
        AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
      | False =>
        (* d2 win *)
        AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
      end
    end
  | False =>
    match res1_bool_neg with
    | True =>
      (* round 1: d2 win  *)
      match res2_bool_eq with
      | True =>
        (* d2 win  *)
        AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
      | False =>
        match res2_bool_neg with
        | True =>
          (* draw need check luck *)
          match luck_bool_eq with
          | True =>
            (* draw *)
            AfterFightDraw token_id1 gen_battle1_param token_id2 gen_battle2_param
          | False =>
            match luck_bool_neg with
            | True =>
              (* d2 win *)
              AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
            | False =>
              (* d1 win *)
              AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
            end
          end
        | False =>
          (* d2 win  *)
          AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
        end
      end
    | False =>
      (* round 1: d1 win  *)
      match res2_bool_eq with
      | True =>
        (* d1 win  *)
        AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
      | False =>
        match res2_bool_neg with
        | True =>
          (* d1 win  *)
          AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
        | False =>
          (* draw need check luck *)
          match luck_bool_eq with
          | True =>
            (* draw *)
            AfterFightDraw token_id1 gen_battle1_param token_id2 gen_battle2_param
          | False =>
            match luck_bool_neg with
            | True =>
              (* d2 win *)
              AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
            | False =>
              (* d1 win *)
              AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
            end
          end
        end
      end
    end
  end
end

procedure FightDoSuper(token_id1: Uint256, gen_battle1_param: Uint256, token_id2: Uint256, gen_battle2_param: Uint256)
  (* generating random values *)
  entropyNumber <- entropy;
  current_block <- & BLOCKNUMBER;
  random = random entropyNumber current_block;
  entropy := random;

  fithy = Uint256 50;

  random_luck = builtin rem random ten2;
  luck_bool_eq = builtin lt random_luck fithy;
  match luck_bool_eq with
  | True =>
    AfterFightWinLose one token_id1 gen_battle1_param token_id2 gen_battle2_param
  | False =>
    AfterFightWinLose two token_id2 gen_battle2_param token_id1 gen_battle1_param
  end
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True =>
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure CheckIsSameDragon(token_id1: Uint256, token_id2: Uint256)
  is_same_dragon = builtin eq token_id1 token_id2;
  match is_same_dragon with
  | True =>
    err = CodeSameDragon;
    ThrowError err
  | False =>
  end
end

procedure CheckInWatingList(token_id: Uint256)
  token_inwatinglist <- exists waiting_list[token_id];
  match token_inwatinglist with
  | False =>
    err = CodeNotInWaitingList;
    ThrowError err
  | True =>
  end
end

procedure CheckNotBothInWaitingList(token_id1: Uint256, token_id2: Uint256)
  token1_inwatinglist <- exists waiting_list[token_id1];
  token2_inwatinglist <- exists waiting_list[token_id2];
  match token1_inwatinglist with
  | False =>
  | True =>
    match token2_inwatinglist with
    | False =>
    | True =>
      err = CodeBothInWaitingList;
      ThrowError err
    end
  end
end

procedure CheckStage(dragon_stage: Uint32)
  is_stage_egg = builtin lt dragon_stage one32;
  match is_stage_egg with
  | False =>
  | True =>
    err = CodeStageIncorrect;
    ThrowError err
  end
end

procedure CheckIsInitiatorOwner(dragon_owner: ByStr20)
  initiator_adr <- tmp_initiator_adr;
  is_owner = builtin eq dragon_owner initiator_adr;
  match is_owner with
  | True =>
  | False =>
    err = CodeNotAnOwner;
    ThrowError err
  end
end

procedure CheckPause(expected: Uint32)
  curent_pause <- pause;
  is_eq = builtin eq expected curent_pause;
  match is_eq with
  | True =>
  | False =>
    err = CodePauseNotPause;
    ThrowError err
  end
end

procedure FightPrepare(dragon1_token_id: Uint256, dragon1_owner: ByStr20, dragon1_stage: Uint32, dragon1_gen_battle: Uint256, dragon2_token_id: Uint256, dragon2_owner: ByStr20, dragon2_stage: Uint32, dragon2_gen_battle: Uint256)
  tmp_dragon1_owner_adr := dragon1_owner;
  tmp_dragon2_owner_adr := dragon2_owner;

  (* 2nd in waitlist - with_id *)

  (* check stage of dragons *)
  CheckStage dragon1_stage;
  CheckStage dragon2_stage;

  (* Need to check one of the dragons is in waiting list and other dragons owner is starting fight *)
  initiator_adr <- tmp_initiator_adr;
  dragon1_owner_bool_eq = builtin eq dragon1_owner initiator_adr;
  dragon2_owner_bool_eq = builtin eq dragon2_owner initiator_adr;

  (* removing dragons from waiting list *)
(*
  token1_inwatinglist <- exists waiting_list[dragon1_token_id];
  match token1_inwatinglist with
  | False =>
  | True =>
    match dragon2_owner_bool_eq with
    | True =>
      fight_price_opt <- waiting_list[dragon1_token_id];
      fight_price = option_uint128 zero128 fight_price_opt;
      tmp_fight_price_fld := fight_price;

      delete waiting_list[dragon1_token_id]
    | False =>
      err = CodeNotAnOwner;
      ThrowError err
    end
  end;
  token2_inwatinglist <- exists waiting_list[dragon2_token_id];
  match token2_inwatinglist with
  | False =>
  | True =>
    match dragon2_owner_bool_eq with
    | True =>
      fight_price_opt <- waiting_list[dragon2_token_id];
      fight_price = option_uint128 zero128 fight_price_opt;
      tmp_fight_price_fld := fight_price;

      delete waiting_list[dragon2_token_id]
    | False =>
      err = CodeNotAnOwner;
      ThrowError err
    end
  end;
*)
  fight_price_opt <- waiting_list[dragon2_token_id];
  fight_price = option_uint128 zero128 fight_price_opt;
  tmp_fight_price_fld := fight_price;

  delete waiting_list[dragon2_token_id];

  super_dragon_avg <- super_dragon_avg_fld;

  avg_def_battle_gen_d1 = get_avg_def_battle_gen dragon1_gen_battle;
  avg_avg_battle_gen_d1 = get_avg_atc_battle_gen dragon1_gen_battle;
  avg_def_battle_gen_d2 = get_avg_def_battle_gen dragon2_gen_battle;
  avg_avg_battle_gen_d2 = get_avg_atc_battle_gen dragon2_gen_battle;

  avg_def_battle_gen_d1_bool = builtin lt avg_def_battle_gen_d1 super_dragon_avg;
  avg_avg_battle_gen_d1_bool = builtin lt avg_avg_battle_gen_d1 super_dragon_avg;
  avg_def_battle_gen_d2_bool = builtin lt avg_def_battle_gen_d2 super_dragon_avg;
  avg_avg_battle_gen_d2_bool = builtin lt avg_avg_battle_gen_d2 super_dragon_avg;

  match avg_def_battle_gen_d1_bool with
  | False =>
    (* start fight process with random, because of super dragon in fight *)
    FightDoSuper dragon1_token_id dragon1_gen_battle dragon2_token_id dragon2_gen_battle
  | True =>
    match avg_avg_battle_gen_d1_bool with
    | False =>
      (* start fight process with random, because of super dragon in fight *)
      FightDoSuper dragon1_token_id dragon1_gen_battle dragon2_token_id dragon2_gen_battle
    | True =>
      match avg_def_battle_gen_d2_bool with
      | False =>
        (* start fight process with random, because of super dragon in fight *)
        FightDoSuper dragon1_token_id dragon1_gen_battle dragon2_token_id dragon2_gen_battle
      | True =>
        match avg_avg_battle_gen_d2_bool with
        | False =>
          (* start fight process with random, because of super dragon in fight *)
          FightDoSuper dragon1_token_id dragon1_gen_battle dragon2_token_id dragon2_gen_battle
        | True =>
          (* start fight process with gens matching with this 2 dragons *)
          FightDo dragon1_token_id dragon1_gen_battle dragon2_token_id dragon2_gen_battle
        end
      end
    end
  end
end

transition FightStart(who_id: Uint256, with_id: Uint256)
  CheckPause zero32;

  tmp_initiator_adr := _sender;
  tmp_token_id := with_id;

  CheckIsSameDragon who_id with_id;
  CheckInWatingList with_id;

  CheckNotBothInWaitingList who_id with_id;

  fight_price_init_opt <- waiting_list[with_id];
  fight_price_init = option_uint128 zero128 fight_price_init_opt;

  TransferFromTo fight_price_init _sender _this_address;

  dragon1_token_id = who_id;

  some_dragon_owner1 <-& contract_main.token_owners[who_id];
  dragon1_owner = option_adr zero_address some_dragon_owner1;

  some_stage1 <-& contract_main.token_stage[who_id];
  dragon1_stage = option_uint32 zero32 some_stage1;

  some_gen_battle1 <-& contract_main.token_gen_battle[who_id];
  dragon1_gen_battle = option_uint256 zero256 some_gen_battle1;

  dragon2_token_id = with_id;

  some_dragon_owner2 <-& contract_main.token_owners[with_id];
  dragon2_owner = option_adr zero_address some_dragon_owner2;

  some_stage2 <-& contract_main.token_stage[with_id];
  dragon2_stage = option_uint32 zero32 some_stage2;

  some_gen_battle2 <-& contract_main.token_gen_battle[with_id];
  dragon2_gen_battle = option_uint256 zero256 some_gen_battle2;

  FightPrepare dragon1_token_id dragon1_owner dragon1_stage dragon1_gen_battle dragon2_token_id dragon2_owner dragon2_stage dragon2_gen_battle
end

transition WaitListAddDel(token_id: Uint256, fight_price: Uint128)
  CheckPause zero32;

  tmp_initiator_adr := _sender;

  some_stage <-& contract_main.token_stage[token_id];
  dragon_stage = option_uint32 zero32 some_stage;

  some_dragon_owner <-& contract_main.token_owners[token_id];
  dragon_owner = option_adr zero_address some_dragon_owner;

  CheckStage dragon_stage;
  CheckIsInitiatorOwner dragon_owner;

  (* Owner wanted to put dragon to waiting list *)
  token_inwatinglist <- exists waiting_list[token_id];
  match token_inwatinglist with
  | False =>
    TransferFromTo fight_price _sender _this_address;

    waiting_list[token_id] := fight_price
  | True =>
    fight_price_init_opt <- waiting_list[token_id];
    fight_price_init = option_uint128 zero128 fight_price_init_opt;

    CallTransfer _sender fight_price_init;

    delete waiting_list[token_id]
  end
end

transition WaitListRemove(token_id: Uint256)
  IsContractOwner;

  token_inwatinglist <- exists waiting_list[token_id];
  match token_inwatinglist with
  | False =>
  | True =>
    fight_price_init_opt <- waiting_list[token_id];
    fight_price_init = option_uint128 zero128 fight_price_init_opt;

    some_dragon_owner <-& contract_main.token_owners[token_id];
    dragon_owner = option_adr zero_address some_dragon_owner;

    CallTransfer dragon_owner fight_price_init;

    delete waiting_list[token_id]
  end
end

transition ChangePause()
  IsContractOwner;
  status <- pause;
  is_pause = builtin eq status one32;
  match is_pause with
  | True =>
    pause := zero32;
    e = {_eventname : "Working"};
    event e
  | False =>
    pause := one32;
    e = {_eventname : "Paused"};
    event e
  end
end

transition ChangeSuperDragonAvg(value: Uint256)
  IsContractOwner;

  e = {
    _eventname: "ChangeSuperDragonAvg";
    value: value
  };
  event e;

  super_dragon_avg_fld := value
end

transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition RecipientAcceptTransferFrom(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount: Uint128)
end
