scilla_version 0

import PairUtils ListUtils
(***************************************************)
(*               Associated library                *)
(***************************************************)
library CrowdSaleDZTforZLP

let zero128 = Uint128 0
let zero = Uint32 0

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let unpack =
  fun (opt_uint128: Option Uint128) =>
    match opt_uint128 with
    | Some some_uint128 => some_uint128
    | None => zero128
    end

let iota =
  fun (m : Uint32) =>
  fun (n : Uint32) =>
  fun (value : ByStr20) =>
    let m_lt_n = builtin lt m n in
    match m_lt_n with
    | True =>
        let delta = builtin sub n m in
        let delta_nat = builtin to_nat delta in
        let nil = Nil {ByStr20} in
        let acc_init = Pair {(List ByStr20) Uint32} nil n in
        let one = Uint32 1 in
        let step = fun (xs_n : Pair (List ByStr20) Uint32) => fun (ignore : Nat) =>
          match xs_n with
          | Pair xs n =>
              let new_n = builtin sub n one in
              let new_xs = Cons {ByStr20} value xs in
              Pair {(List ByStr20) Uint32} new_xs new_n
          end in
        let fold = @nat_fold (Pair (List ByStr20) Uint32) in
        let xs_m = fold step acc_init delta_nat in
        match xs_m with
        | Pair xs m => xs
        end
    | False => Nil {ByStr20}
    end

(* Error events *)
type Error =
  | CodeInsufficientAmount
  | CodeNotAuthorised

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeInsufficientAmount => Int32 -1
      | CodeNotAuthorised      => Int32 -2
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract CrowdSaleDZTforZLP

(*  Parameters *)
(contract_owner: ByStr20,
 store_zlp: ByStr20,
 main_dzt: ByStr20)

(* Mutable fields *)
field incrementer: Uint128 = Uint128 0
field current_price: Uint128 = Uint128 1000000000000

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner()
  is_owner = builtin eq contract_owner _sender;

  match is_owner with
  | True =>
  | False =>
    err = CodeNotAuthorised;
    ThrowError err
  end
end

procedure MintDragons(onwers: List ByStr20)
  mint_call = {
    _tag: "BatchMint";
    _recipient: main_dzt;
    _amount: Uint128 0;
    onwers: onwers
  };
  msgs = one_msg mint_call;
  send msgs
end

transition setPrice(price: Uint128)
  IsOwner;

  current_price := price;
  e = {
    _eventname: "price_change_success";
    by: _sender
  };
  event e
end

transition setIncrementer(value: Uint128)
  IsOwner;

  incrementer := value;
  e = {
    _eventname: "incrementer_change_success";
    by: _sender
  };
  event e
end

transition BuyForZLP(amount: Uint32)
  price <- current_price;
  inc <- incrementer;
  some_count128 = builtin to_uint128 amount;
  dragon_count128 = unpack some_count128;

  is_zero = builtin eq dragon_count128 zero128;
  match is_zero with
  | False =>
    owner_list = iota zero amount _sender;

    MintDragons owner_list;
    
    amount_zlp = builtin mul dragon_count128 price;
    addition = builtin mul inc dragon_count128;
    new_price = builtin add price addition;
    current_price := new_price;
    
    msg = {
      _tag: "AcceptZLP";
      _recipient: store_zlp;
      _amount: Uint128 0;
      from: _sender;
      amount: amount_zlp
    };
    msgs = one_msg msg;
    send msgs

  | True =>
    err = CodeInsufficientAmount;
    ThrowError err
  end
end

