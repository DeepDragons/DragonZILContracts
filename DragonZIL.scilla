scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils
library DragonZIL

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

let default_stage = Uint32 0
let zero = Uint256 0
let one = Uint256 1
let two = Uint256 2
let three = Uint256 3
let four = Uint256 4
let five = Uint256 5
let six = Uint256 6
let seven = Uint256 7
let eight = Uint256 8
let nine = Uint256 9
let ten = Uint256 10
let ten2 = Uint256 100
let ten3 = Uint256 1000
let tt = True
let ff = False


let add_owner_count =
  fun (some_current_count: Option Uint256) =>
    match some_current_count with
    | Some current_count =>
      builtin add current_count one
    | None => one
    end

let sub_owner_count =
fun (some_current_count: Option Uint256) =>
  match some_current_count with
  | Some current_count =>
    let is_zero = builtin eq current_count zero in
    match is_zero with
    | True => zero
    | False =>
        builtin sub current_count one
    end
  | None => zero
  end

(* Check if a sender is an operator of the owner, approved for the given ID *)
(* or is the owner of the token                                             *)
let is_approved_or_owner =
  fun (is_owner: Bool) =>
  fun (is_approved: Bool) =>
  fun (is_approved_for_all: Bool) =>
    let is_owner_or_approved = orb is_owner is_approved in
    orb is_owner_or_approved is_approved_for_all

let random =
  fun (entropy: Uint256) =>
  fun (block_number: BNum) =>
  fun (addr: ByStr20) =>
    let addr_hash = builtin keccak256hash addr in
    let entropy_hash = builtin keccak256hash entropy in
    let blockhash = builtin keccak256hash block_number in
    let ehash = builtin concat entropy_hash blockhash in
    let ahash = builtin concat ehash addr_hash in
    let last_hash = builtin concat ehash ahash in
    let hash = builtin keccak256hash last_hash in
      builtin to_uint256 hash

let calc_gens_tmp_new =
  fun (old_val: Uint256) =>
  fun (gen_num: Uint256) =>
  fun (check_with: Uint256) =>
  fun (val: Uint256) =>
    let gen_bool = builtin eq gen_num check_with in
    match gen_bool with
    | True => val
    | False => old_val
    end

let format: String = ".png"

(* Error events *)
type Error =
  | CodeNotAuthorised
  | CodeNotFound
  | CodeTokenExists
  | CodeUnexpectedError
  | CodeStageError

let make_error_event =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotAuthorised    => Int32 -1
      | CodeNotFound         => Int32 -2
      | CodeTokenExists      => Int32 -3
      | CodeUnexpectedError  => Int32 -4
      | CodeStageError       => Int32 -5
      end
    in
    { _eventname : "Error"; code : result_code }

(* Dummy user-defined ADT *)
type Unit =
| Unit

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract DragonZIL
(contract_owner: ByStr20,
  name : String,
  symbol: String
)

(* Mutable fields *)

field entropy : Uint256 = Uint256 0
field max_stage : Uint32 = Uint32 0

(* List of minters available *)
field minters: Map ByStr20 Unit = Emp ByStr20 Unit

(* Mapping between token_id to token_owner *)
field token_owners: Map Uint256 ByStr20 = Emp Uint256 ByStr20

(* Mapping from owner to number of owned tokens *)
field owned_token_count: Map ByStr20 Uint256 = Emp ByStr20 Uint256

(* Mapping between token_id to approved address                              *)
(* @dev: There can only be one approved address per token at any given time. *)
field token_approvals: Map Uint256 ByStr20 = Emp Uint256 ByStr20

(* Mapping from owner to operator approvals  *)
field operator_approvals: Map ByStr20 (Map ByStr20 Bool)
                            = Emp ByStr20 (Map ByStr20 Bool)

(* Mapping from token_id to token_uri *)
field token_uris: Map Uint256 String = Emp Uint256 String

field token_gen_battle: Map Uint256 Uint256 = Emp Uint256 Uint256
field token_gen_image: Map Uint256 Uint256 = Emp Uint256 Uint256

field tokens_owner_stage: Map ByStr20 (Map Uint256 Uint32)
  = Emp ByStr20 (Map Uint256 Uint32)

field tokens_owner_stage: Map ByStr20 (Map Uint256 Uint32)
  = Emp ByStr20 (Map Uint256 Uint32)

(* Total token count *)
field total_supply: Uint256 = Uint256 0
field count_supply: Uint256 = Uint256 0

field cloud: String = ""



(* Emit Errors *)
procedure EmitError(err : Error)
  e = make_error_event err;
  event e;
  throw
end

(* Getter transitions *)

(* @dev: Get number of NFTs assigned to a token_owner *)
transition balanceOf(address: ByStr20)
  some_bal <- owned_token_count[address];
  balance =
    match some_bal with
    | Some bal => bal
    | None => Uint256 0
    end;
  msg_to_sender = { _tag : "balanceOfCallBack"; _recipient : _sender;
                    _amount : Uint128 0; balance : balance};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Get total supply of NFTs minted *)
transition totalSupply()
  current_supply <- total_supply;
  msg_to_sender = { _tag : "totalSupplyCallBack"; _recipient : _sender; _amount : Uint128 0;
                   total_supply : current_supply};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Get name of the NFTs *)
transition name()
  msg_to_sender = { _tag : "nameCallBack"; _recipient : _sender; _amount : Uint128 0;
                   name : name};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Get name of the NFTs *)
transition symbol()
  msg_to_sender = { _tag : "symbolCallBack"; _recipient : _sender; _amount : Uint128 0;
                   symbol : symbol};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Get approved_addr for token_id *)
transition getApproved(token_id: Uint256)
  some_token_approval <- token_approvals[token_id];
  match some_token_approval with
  | Some addr =>
    msg_to_sender = { _tag : "getApprovedCallBack"; _recipient : _sender; _amount : Uint128 0;
                      approved_addr : addr; token_id : token_id};
    msgs = one_msg msg_to_sender;
    send msgs
  | None => throw
  end
end

(* @dev: Get the token_uri of a certain token_id *)
transition getTokenURI(token_id: Uint256)
  some_token_uri <- token_uris[token_id];
  match some_token_uri with
  | Some token_uri =>
    msg_to_sender = { _tag : "getTokenURICallBack"; _recipient : _sender; _amount : Uint128 0;
                      token_uri : token_uri};
    msgs = one_msg msg_to_sender;
    send msgs
  | None => throw
  end
end

(* @dev: Check if a token_id is owned by a token_owner and get a Bool *)
transition isOwner(token_id: Uint256, address: ByStr20)
  some_token_owner <- token_owners[token_id];
  is_owner_bool =
    match some_token_owner with
    | Some addr => builtin eq addr address
    | None => False
    end;
  msg_to_sender = { _tag : "isOwnerCallBack"; _recipient : _sender; _amount : Uint128 0;
                    is_owner : is_owner_bool};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Check if address is operator for token_owner and get a Bool *)
transition isApprovedForAll(token_owner: ByStr20, operator: ByStr20)
  some_operator_approval <- operator_approvals[token_owner][operator];
  is_operator =
    match some_operator_approval with
    | Some status => status
    | None => False
    end;
  msg_to_sender = { _tag : "isApprovedForAllCallBack"; _recipient : _sender; _amount : Uint128 0;
                   is_operator : is_operator};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* Interface transitions *)

(* @dev:    Add or remove approved minters. Only contract_owner can approve minters. *)
(* @param:  minter      - Address of the minter to be approved or removed            *)
(* Returns error event CodeNotAuthorised if _sender is not contract_owner.           *)
transition configureMinter(minter: ByStr20)
  is_owner = builtin eq contract_owner _sender;
  match is_owner with
  | False =>
    (* Token exists, return error code *)
    err = CodeNotAuthorised;
    EmitError err
  | True =>
    some_minter <- minters[minter];
    match some_minter with
    | Some Unit =>
      delete minters[minter];
      (* Emit success event *)
      e = {_eventname: "RemovedMinterSuccess"; minter: minter};
      event e
    | None =>
      authorize = Unit;
      minters[minter] := authorize;
      (* Emit success event *)
      e = {_eventname: "AddMinterSuccess"; minter: minter};
      event e
    end
  end
end

procedure addToken(to: ByStr20, token_id: Uint256)
  tokens_owner_stage[to][token_id] := default_stage
end

transition ChangeCloud(new_cloud: String)
  is_owner = builtin eq contract_owner _sender;

  match is_owner with
  | False =>
    err = CodeNotAuthorised;
    EmitError err
  | True =>
    cloud := new_cloud
  end
end

transition UpState(token_id: Uint256)
  (* Check if token exists *)
  some_token_owner <- token_owners[token_id];
  max_stage_of_token <- max_stage;

  match some_token_owner with
  | None =>
    (* Token does not exists, return error code *)
    err = CodeNotFound;
    EmitError err
  | Some token_owner =>
    is_owner = builtin eq _sender token_owner;

    match is_owner with
    | False =>
      (* Unauthorised transaction*)
      err = CodeNotAuthorised;
      EmitError err
    | True =>
      some_token_stage <- tokens_owner_stage[token_owner][token_id];
      match some_token_stage with
        | Some stage => 
          one32 = Uint32 1;
          next_stage = builtin add stage one32;
          is_max = builtin lt next_stage max_stage_of_token;

          match is_max with
            | True =>
              err = CodeStageError;
              EmitError err
            | False =>
              tokens_owner_stage[_sender][token_id] := next_stage;

              e = {
                _eventname: "TokenStageUpgrade";
                token_id: token_id;
                old_stage: stage;
                next_stage: next_stage
              };
              event e
          end
        | None =>
          err = CodeStageError;
          EmitError err
      end
    end
  end
end

transition ChangeCloud(new_cloud: String)
  is_owner = builtin eq contract_owner _sender;

  match is_owner with
  | False =>
    err = CodeNotAuthorised;
    EmitError err
  | True =>
    cloud := new_cloud
  end
end

procedure generateImageGen(token_id:Uint256, random_val: Uint256)
  random = random_val;
  (* gens init for current token *)
  gens_image_ = Uint256 777;
  gen_tmp = Uint256 0;

  (* image gen Aura - 4 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three zero;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five one;
  gen = calc_gens_tmp_new gen gen_rand six two;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight three;
  gen = calc_gens_tmp_new gen gen_rand nine four;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Aura *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Horns - 7 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four two;
  gen = calc_gens_tmp_new gen gen_rand five three;
  gen = calc_gens_tmp_new gen gen_rand six four;
  gen = calc_gens_tmp_new gen gen_rand seven five;
  gen = calc_gens_tmp_new gen gen_rand eight six;
  gen = calc_gens_tmp_new gen gen_rand nine seven;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Horns *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Scales - 4 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five two;
  gen = calc_gens_tmp_new gen gen_rand six two;
  gen = calc_gens_tmp_new gen gen_rand seven three;
  gen = calc_gens_tmp_new gen gen_rand eight three;
  gen = calc_gens_tmp_new gen gen_rand nine four;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Scales *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Spots - 9 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two two;
  gen = calc_gens_tmp_new gen gen_rand three three;
  gen = calc_gens_tmp_new gen gen_rand four four;
  gen = calc_gens_tmp_new gen gen_rand five five;
  gen = calc_gens_tmp_new gen gen_rand six six;
  gen = calc_gens_tmp_new gen gen_rand seven seven;
  gen = calc_gens_tmp_new gen gen_rand eight eight;
  gen = calc_gens_tmp_new gen gen_rand nine nine;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Spots *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Tail - 7 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three two;
  gen = calc_gens_tmp_new gen gen_rand four two;
  gen = calc_gens_tmp_new gen gen_rand five three;
  gen = calc_gens_tmp_new gen gen_rand six four;
  gen = calc_gens_tmp_new gen gen_rand seven five;
  gen = calc_gens_tmp_new gen gen_rand eight six;
  gen = calc_gens_tmp_new gen gen_rand nine seven;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Tail *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Wings - 5 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five two;
  gen = calc_gens_tmp_new gen gen_rand six two;
  gen = calc_gens_tmp_new gen gen_rand seven three;
  gen = calc_gens_tmp_new gen gen_rand eight four;
  gen = calc_gens_tmp_new gen gen_rand nine five;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Wings *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Spins - 4 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero zero;
  gen = calc_gens_tmp_new gen gen_rand one zero;
  gen = calc_gens_tmp_new gen gen_rand two zero;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five two;
  gen = calc_gens_tmp_new gen gen_rand six two;
  gen = calc_gens_tmp_new gen gen_rand seven three;
  gen = calc_gens_tmp_new gen gen_rand eight three;
  gen = calc_gens_tmp_new gen gen_rand nine four;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Spins *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Body - 3 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero one;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three one;
  gen = calc_gens_tmp_new gen gen_rand four one;
  gen = calc_gens_tmp_new gen gen_rand five two;
  gen = calc_gens_tmp_new gen gen_rand six two;
  gen = calc_gens_tmp_new gen gen_rand seven two;
  gen = calc_gens_tmp_new gen gen_rand eight three;
  gen = calc_gens_tmp_new gen gen_rand nine three;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Body *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Eyes - 9 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero one;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two two;
  gen = calc_gens_tmp_new gen gen_rand three three;
  gen = calc_gens_tmp_new gen gen_rand four four;
  gen = calc_gens_tmp_new gen gen_rand five five;
  gen = calc_gens_tmp_new gen gen_rand six six;
  gen = calc_gens_tmp_new gen gen_rand seven seven;
  gen = calc_gens_tmp_new gen gen_rand eight eight;
  gen = calc_gens_tmp_new gen gen_rand nine nine;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Eyes *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Head - 5 types *)
  gen_rand = builtin rem random ten;
  gen = calc_gens_tmp_new gen_tmp gen_rand zero one;
  gen = calc_gens_tmp_new gen gen_rand one one;
  gen = calc_gens_tmp_new gen gen_rand two one;
  gen = calc_gens_tmp_new gen gen_rand three two;
  gen = calc_gens_tmp_new gen gen_rand four two;
  gen = calc_gens_tmp_new gen gen_rand five three;
  gen = calc_gens_tmp_new gen gen_rand six three;
  gen = calc_gens_tmp_new gen gen_rand seven four;
  gen = calc_gens_tmp_new gen gen_rand eight four;
  gen = calc_gens_tmp_new gen gen_rand nine five;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* image gen Color Claws *)
  gen_rand = builtin rem random ten;
  gen = builtin div gen_rand two;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten;

  i = builtin mul gens_image_ ten;
  i2 = builtin add i gen;
  gens_image_ = i2;

  (* color scheme *)
  gen_rand = builtin rem random ten3;
  (* moving to next digit *)
  random = builtin sub random gen_rand;
  random = builtin div random ten3;
  gen_rand = builtin div gen_rand four;
  i = builtin mul gens_image_ ten3;
  i2 = builtin add i gen_rand;
  gens_image_ = i2;

  (* mutagenImutable *)
  (* last gen no need to move to next digit *)
  gen_rand = builtin rem random ten3;
  gen_rand = builtin div gen_rand four;
  i = builtin mul gens_image_ ten3;
  i2 = builtin add i gen_rand;
  gens_image_ = i2;

  (* store gens to token *)
  token_gen_image[token_id] := gens_image_
end

(* @dev:    Mint new tokens. Only contract_owner can mint.         *)
(* @param:  to        - Address of the token recipient             *)
(* @param:  token_id  - ID of the new token to be minted           *)
(* @param:  token_uri -  URI of the the new token to be minted     *)
(* Returns error event CodeTokenExists if token already exists.    *)
(* Returns error event CodeNotAuthorised if _sender is not minter. *)
(* Revert transition if invalid recipient contract.                *)
transition mint(to: ByStr20)
  number_of_tokens <- count_supply;
  cloud_url <- cloud;
  token_id = builtin add number_of_tokens one;

  (* Check if token exists *)
  token_exist <- exists token_owners[token_id];
  match token_exist with
  | True =>
    (* Token exists, return error code *)
    err = CodeTokenExists;
    EmitError err
  | False =>
    (* Check if sender is contract_owner *)
    is_contract_owner = builtin eq _sender contract_owner;
    (* Check if sender is a minter *)
    is_minter <- exists minters[_sender];
    is_authorised = orb is_contract_owner is_minter;
    match is_authorised with
    | True =>
      (* Mint new token *)
      token_owners[token_id] := to;
      entropyNumber <- entropy;
      current_block <- & BLOCKNUMBER;
      stage_as_str = "0_";
      number_of_token = builtin to_string token_id;
      id_name = builtin concat stage_as_str number_of_token;
      token_image_name = builtin concat id_name format;
      token_uri = builtin concat cloud_url token_image_name;

      random1 = random entropyNumber current_block to;
      random2 = random random1 current_block to;

      entropy := random2;

      token_gen_battle[token_id] := random1;
      generateImageGen token_id random2;

      (* Add to owner count *)
      some_current_count <- owned_token_count[to];
      new_count = add_owner_count some_current_count;
      owned_token_count[to] := new_count;
      (* Add token_uri for token_id *)
      token_uris[token_id] := token_uri;
      (* Add to total_supply *)
      current_supply <- total_supply;
      new_supply = builtin add current_supply one;
      new_count = builtin add number_of_tokens one;
      total_supply := new_supply;
      count_supply := new_count;
      addToken to token_id;
      (* Emit success event *)
      e = {_eventname: "MintSuccess"; by: _sender; recipient: to;
           token_id: token_id; token_uri: token_uri};
      event e;
      (* Send dummy message.                                                         *)
      (* Revert transition if invalid recipient contract. Ignore if external address *)
      msg_to_recipient = { _tag : "recipientAcceptMint"; _recipient : to; _amount : Uint128 0 };
      msg_to_sender = { _tag : "mintCallBack"; _recipient : _sender; _amount : Uint128 0;
                        recipient : to; token_id : token_id};
      msgs = two_msgs msg_to_recipient msg_to_sender;
      send msgs
    | False =>
      (* Unauthorised transaction*)
      err = CodeNotAuthorised;
      EmitError err
    end
  end
end

(* @dev:    Burn existing tokens. Only token_owner or an approved operator can burn a NFT. *)
(* @param:  token_id - Unique ID of the NFT to be destroyed                                *)
(* Emits error event CodeNotFound if token does not exists.                              *)
(* Emits error event CodeNotAuthorised if _sender is not token_owner or operator.        *)
transition burn(token_id: Uint256)
  (* Check if token exists *)
  some_token_owner <- token_owners[token_id];
  match some_token_owner with
  | None =>
    (* Token does not exist, return error code *)
    err = CodeNotFound;
    EmitError err
  | Some token_owner =>
    (* Check if sender is token_owner *)
    is_owner = builtin eq _sender token_owner;
    (* Check if sender is token_owner approvedForAll operator *)
    some_operator <- operator_approvals[token_owner][_sender];
    is_approved_for_all =
      match some_operator with
      | None => False
      | Some val => val
      end;
    (* Check if sender is an authorised *)
    is_authorised = orb is_owner is_approved_for_all;
    match is_authorised with
    | False =>
      (* Unauthorised transaction *)
      err = CodeNotAuthorised;
      EmitError err
    | True =>
      (* Destroy existing token *)
      delete token_owners[token_id];
      delete token_approvals[token_id];
      delete token_uris[token_id];
      delete token_gen_battle[token_id];
      delete token_gen_image[token_id];
      delete tokens_owner_stage[token_owner][token_id];
      (* Deduct from owned_token_count *)
      some_current_count <- owned_token_count[token_owner];
      some_new_count = sub_owner_count some_current_count;
      owned_token_count[token_owner] := some_new_count;
      (* Deduct from total_supply *)
      current_supply <- total_supply;
      new_supply = builtin sub current_supply one;
      total_supply := new_supply;
      (* Emit success event *)
      e = {_eventname: "BurnSuccess"; initiator: _sender; burn_address: token_owner; token: token_id};
      event e;
      msg_to_sender = { _tag : "burnCallBack"; _recipient : _sender; _amount : Uint128 0;
                        initiator : _sender; burn_address : token_owner; token_id : token_id };
      msgs = one_msg msg_to_sender;
      send msgs
    end
  end
end


(* @dev: Approves OR remove an address ability to transfer a given token_id       *)
(* There can only be one approved_spender per token at any given time               *)
(* param: to       - Address to be approved for the given token_id                  *)
(* param: token_id - Unique ID of the NFT to be approved                            *)
(* Returns error event CodeNotFound if token does not exists.                       *)
(* Returns error event CodeNotAuthorised if _sender is not token_owner or operator. *)
transition approve(to: ByStr20, token_id: Uint256)
  (* Get token_owner address *)
  some_token_owner <- token_owners[token_id];
  match some_token_owner with
  | None =>
    (* Token not found *)
    err = CodeNotFound;
    EmitError err
  | Some token_owner =>
    is_owner = builtin eq _sender token_owner;
    some_operator <- operator_approvals[token_owner][_sender];
    is_operator =
      match some_operator with
      | Some val => val
      | None => False
      end;
    is_authorised = orb is_owner is_operator;
    match is_authorised with
    | True =>
      some_approved_addr <- token_approvals[token_id];
      match some_approved_addr with
      | None =>
        token_approvals[token_id] := to;
        (* Emit event *)
        e = {_eventname: "AddApprovalSuccess"; initiator: _sender; approved_spender: to; token_id: token_id};
        event e;
        msg_to_sender = { _tag : "addApprovalSuccessCallBack"; _recipient : _sender; _amount : Uint128 0;
                          approved_spender : to; token_id : token_id };
        msgs = one_msg msg_to_sender;
        send msgs
      | Some addr =>
        delete token_approvals[token_id];
        (* Emit event *)
        e = {_eventname: "RemoveApprovalSuccess"; initiator: _sender; removed_spender: to; token_id: token_id};
        event e;
        msg_to_sender = { _tag : "removeApprovalSuccessCallBack"; _recipient : _sender; _amount : Uint128 0;
                          removed_spender : to; token_id : token_id };
        msgs = one_msg msg_to_sender;
        send msgs
      end
    | False =>
      (* Unauthorised transaction *)
      err = CodeNotAuthorised;
      EmitError err
    end
  end
end

(* @dev: Sets or unsets the approval of a given operator for a token_owner/_sender *)
(* @param: to       - Address to be set or unset as operator                       *)
(* @param: approved - Status of approval to be set for the address                 *)
(* Returns error event CodeNotAuthorised if "to" address is the token_owner.       *)
transition setApprovalForAll(to: ByStr20, approved: Bool)
  (* Checks if the _sender is approving himself *)
  is_valid_operation = let check = builtin eq _sender to in negb check;
  (* Require the approval to not be the _sender *)
  match is_valid_operation with
  | True =>
    (* Check if _sender has an existing record on the operatorApproval *)
    operator_approvals[_sender][to] := approved;
    (* Stringify boolean value to be emitted in the event *)
    approved_str = bool_to_string approved;
    e = {_eventname: "SetApprovalForAllSuccess"; initiator: _sender; operator: to; status: approved_str};
    event e;
    msg_to_sender = { _tag : "setApprovalForAllSuccessCallBack"; _recipient : _sender; _amount : Uint128 0;
                      operator : to; status: approved_str };
    msgs = one_msg msg_to_sender;
    send msgs
  | False =>
    err = CodeNotAuthorised;
    EmitError err
  end
end

(* @dev: Transfer the ownership of a given token_id to another address. Only token_owner transition. *)
(* @param: to       - Recipient address for the token                                                *)
(* @param: token_id - Unique ID of the NFT to be transferred                                         *)
(* Returns error event CodeNotFound if token does not exists                                         *)
(* Returns error event CodeNotAuthorised if _sender is not token_owner.                              *)
(* Revert transition if invalid recipient contract.                                                  *)
transition transfer(to: ByStr20, token_id: Uint256)
  (* Check if token exists *)
  some_token_owner <- token_owners[token_id];

  match some_token_owner with
  | None =>
    (* Token does not exists, return error code *)
    err = CodeNotFound;
    EmitError err
  | Some token_owner =>
    (* Check if sender is token_owner *)
    is_owner = builtin eq _sender token_owner;
    match is_owner with
    | False =>
      (* Unauthorised transaction*)
      err = CodeNotAuthorised;
      EmitError err
    | True =>
      owner_stage <- tokens_owner_stage[token_owner][token_id];

      match owner_stage with
      | None =>
        (* Token does not exists, return error code *)
        err = CodeNotFound;
        EmitError err
      | Some stage =>
        (* Change token_owner for that token_id *)
        token_owners[token_id] := to;
        (* Delete tokenApproval entry for that token_id *)
        delete token_approvals[token_id];
        delete tokens_owner_stage[token_owner][token_id];
        (* Subtract one from previous token owner count *)
        some_from_count <- owned_token_count[_sender];
        new_from_count = sub_owner_count some_from_count;
        owned_token_count[_sender] := new_from_count;
        tokens_owner_stage[to][token_id] := stage;
        (* Add one to the new token owner count *)
        some_to_count <- owned_token_count[to];
        new_to_count = add_owner_count some_to_count;
        owned_token_count[to] := new_to_count;
        e = {_eventname: "TransferSuccess"; from: _sender; recipient: to; token: token_id};
        event e;
        (* Send dummy callback message.                                                *)
        (* Revert transition if invalid recipient contract. Ignore if external address *)
        msg_to_recipient = { _tag : "recipientAcceptTransfer"; _recipient : to; _amount : Uint128 0;
                            from : _sender; recipient : to; token_id : token_id };
        msg_to_sender = { _tag : "transferSuccessCallBack"; _recipient : _sender; _amount : Uint128 0;
                          from : _sender; recipient : to; token_id : token_id };
        msgs = two_msgs msg_to_recipient msg_to_sender;
        send msgs
      end
    end
  end
end

(* @dev: Transfer the ownership of a given token_id to another address. Only approved_spender or operator transition. *)
(* @param: to       - Recipient address for the NFT                                                                   *)
(* @param: token_id - Unique ID of the NFT to be transferred                                                          *)
(* Returns error event CodeNotFound if token does not exists                                                          *)
(* Returns error event CodeNotAuthorised if _sender is not approved_spender or operator.                              *)
(* Revert transition if invalid recipient contract.                                                                   *)
transition transferFrom(to: ByStr20, token_id: Uint256)
  (* Check if token exists *)
  some_token_owner <- token_owners[token_id];

  match some_token_owner with
  | None =>
    (* Token does not exists, return error code *)
    err = CodeNotFound;
    EmitError err
  | Some token_owner =>
    owner_stage <- tokens_owner_stage[token_owner][token_id];
    (* Check if sender is an approved_spender *)
    some_token_approval <- token_approvals[token_id];
    is_approved = match some_token_approval with
      | None => False
      | Some approved_address =>
        builtin eq _sender approved_address
      end;
    (* Check if sender is an operator *)
    some_operator_status <- operator_approvals[token_owner][_sender];
    is_approved_for_all = match some_operator_status with
      | None => False
      | Some val => val
      end;
    (* Check if sender is an authorised personnel *)
    is_authorised = orb is_approved is_approved_for_all;
    match is_authorised with
    | False =>
      (* Unauthorised transaction*)
      err = CodeNotAuthorised;
      EmitError err
    | True =>
      match owner_stage with
      | None =>
        (* Token does not exists, return error code *)
        err = CodeNotFound;
        EmitError err
      | Some stage =>
        (* Change token_owner for that token_id *)
        token_owners[token_id] := to;
        (* Delete tokenApproval entry for that token_id *)
        delete token_approvals[token_id];
        delete tokens_owner_stage[token_owner][token_id];
        (* Subtract one from previous token owner count *)
        some_from_count <- owned_token_count[token_owner];
        new_from_count = sub_owner_count some_from_count;

        tokens_owner_stage[to][token_id] := stage;
        owned_token_count[token_owner] := new_from_count;
        (* Add one to the new token owner count *)
        some_to_count <- owned_token_count[to];
        new_to_count = add_owner_count some_to_count;
        owned_token_count[to] := new_to_count;
        e = {_eventname: "TransferFromSuccess"; from: token_owner; recipient: to; token: token_id};
        event e;
        (* Send dummy callback message.*)
        (* Revert transition if invalid recipient contract. Ignore if external address *)
        msg_to_recipient = { _tag : "recipientAcceptTransferFrom"; _recipient : to; _amount : Uint128 0;
                            from : token_owner; recipient : to; token_id : token_id };
        msg_to_sender = { _tag : "transferFromSuccessCallBack"; _recipient : _sender; _amount : Uint128 0;
                          from : token_owner; recipient : to; token_id : token_id };
        msgs = two_msgs msg_to_recipient msg_to_sender;
        send msgs
      end
    end
  end
end