scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils PairUtils ListUtils

library DragonZIL

(* User-defined ADTs *)
type Dummy =
| Dummy

type Operation =
| Add
| Sub

type MigrateOption =
| Battle
| Image
| Counters
| TokenStage
| TokensOwnerStage
| TokenOwners
| OwnedTokenCount
| TokenUris
| Done

(* Custom ADT storing - owner, token_gen_battle, token_gen_image *)
type Dragon =
| Dragon of  ByStr20 Uint256 Uint256

(* Error exception *)
type Error =
| CodeNotContractOwner
| CodeIsSelf
| CodeTokenExists
| CodeIsNotMinter
| CodeNotTokenOwner
| CodeNotFound
| CodeNotApprovedForAll
| CodeNotOwnerOrOperator
| CodeNotApprovedSpenderOrOperator
| CodeNotOwnerOrOperatorOrApprovedSpender
| CodeStageError

(* Global variables *)
let zero   = Uint256 0
let one    = Uint256 1
let verdad = Dummy

let add_operation = Add
let sub_operation = Sub

let zero_address = 0x0000000000000000000000000000000000000000
let dummy_str    = ""
let zero32       = Uint32 0

let op_battle             = Battle
let op_image              = Image
let op_counters           = Counters
let op_token_stage        = TokenStage
let op_tokens_owner_stage = TokensOwnerStage
let op_token_owners       = TokenOwners
let op_owned_token_count  = OwnedTokenCount
let op_token_uris         = TokenUris
let op_done               = Done

(* Library functions *)
let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
  fun (msg1 : Message) =>
  fun (msg2 : Message) =>
    let msgs_tmp = one_msg msg2 in
    Cons {Message} msg1 msgs_tmp

let get_bal =
  fun (some_bal: Option Uint256) =>
    match some_bal with
    | Some bal => bal
    | None => zero
    end

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_address = @option_value ByStr20
let option_uint256 = @option_value Uint256
let pair_token_gens_list = @list_map (Pair Uint256 Uint256) Dragon
let first_item = @fst Uint256 Uint256
let last_item = @snd Uint256 Uint256

let build_dragon =
  fun (owner: ByStr20) =>
  fun (input_token_gens: Pair Uint256 Uint256) =>
    let gen_image = first_item input_token_gens in
    let gen_battle = last_item input_token_gens in
      Dragon owner gen_image gen_battle

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotContractOwner                    => Int32 -1
      | CodeIsSelf                              => Int32 -2
      | CodeTokenExists                         => Int32 -3
      | CodeIsNotMinter                         => Int32 -4
      | CodeNotTokenOwner                       => Int32 -5
      | CodeNotFound                            => Int32 -6
      | CodeNotApprovedForAll                   => Int32 -7
      | CodeNotOwnerOrOperator                  => Int32 -8
      | CodeNotApprovedSpenderOrOperator        => Int32 -9
      | CodeNotOwnerOrOperatorOrApprovedSpender => Int32 -10
      | CodeStageError                          => Int32 -11
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract DragonZIL
(
  contract_owner: ByStr20,
  name : String,
  symbol: String,
  old: ByStr20 with contract
    field token_gen_battle: Map Uint256 Uint256,
    field token_gen_image: Map Uint256 Uint256,
    field token_id_count: Uint256,
    field token_stage: Map Uint256 Uint32,
    field tokens_owner_stage: Map ByStr20 (Map Uint256 Uint32),
    field token_owners: Map Uint256 ByStr20,
    field owned_token_count: Map ByStr20 Uint256,
    field token_uris: Map Uint256 String,
    field total_supply: Uint256
  end
)

field max_stage : Uint32 = Uint32 1
field token_gen_battle: Map Uint256 Uint256 = Emp Uint256 Uint256
field token_gen_image: Map Uint256 Uint256 = Emp Uint256 Uint256
field token_id_count: Uint256 = zero
field cloud: String = dummy_str
field format_img: String = ".png"
field token_stage: Map Uint256 Uint32 = Emp Uint256 Uint32
field tokens_owner_stage: Map ByStr20 (Map Uint256 Uint32)
  = Emp ByStr20 (Map Uint256 Uint32)
field minters: Map ByStr20 Dummy =
    let emp_map = Emp ByStr20 Dummy in
    builtin put emp_map contract_owner verdad

field token_owners: Map Uint256 ByStr20 = Emp Uint256 ByStr20
field owned_token_count: Map ByStr20 Uint256 = Emp ByStr20 Uint256
field token_approvals: Map Uint256 ByStr20 = Emp Uint256 ByStr20
field operator_approvals: Map ByStr20 (Map ByStr20 Dummy)
                            = Emp ByStr20 (Map ByStr20 Dummy)
field token_uris: Map Uint256 String = Emp Uint256 String
field total_supply: Uint256 = zero
field migrate_option: MigrateOption = op_battle

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure ChangeTokenURI(token_id: Uint256, stage: Uint32)
  cloud_url <- cloud;
  format <- format_img;
  separate = "_";

  stage_as_astring = builtin to_string stage;
  stage_separate = builtin concat stage_as_astring separate;
  number_of_token = builtin to_string token_id;
  id_name = builtin concat stage_separate number_of_token;
  token_image_name = builtin concat id_name format;
  token_uri = builtin concat cloud_url token_image_name;

  (* Add token_uri for token_id *)
  token_uris[token_id] := token_uri
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure IsSelf(address_a: ByStr20, address_b: ByStr20)
  is_self = builtin eq address_a address_b;
  match is_self with
  | False =>
  | True =>
    err = CodeIsSelf;
    ThrowError err
  end
end

procedure IsTokenExists(token_id: Uint256)
  token_exist <- exists token_owners[token_id];
  match token_exist with
  | False =>
  | True =>
    err = CodeTokenExists;
    ThrowError err
  end
end

procedure IsMinter(address: ByStr20)
  is_minter <- exists minters[address];
  match is_minter with
  | True =>
  | False =>
    err = CodeIsNotMinter;
    ThrowError err
  end
end

procedure IsTokenOwner(token_id: Uint256, address: ByStr20)
  some_token_owner <- token_owners[token_id];
  match some_token_owner with
  | Some addr => 
    is_token_owner = builtin eq addr address;
    match is_token_owner with
    | True =>
    | False =>
      err = CodeNotTokenOwner;
      ThrowError err
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

procedure IsApprovedForAll(token_owner: ByStr20, operator: ByStr20)
  is_operator_approved <- exists operator_approvals[token_owner][operator];
  match is_operator_approved with
  | True =>
  | False =>
    err = CodeNotApprovedForAll;
    ThrowError err
  end
end

procedure IsOwnerOrOperator(token_owner: ByStr20)
  is_owner = builtin eq _sender token_owner;
  is_approved_for_all <- exists operator_approvals[token_owner][_sender];
  is_authorised = orb is_owner is_approved_for_all;
  match is_authorised with
  | True =>
  | False =>
    err = CodeNotOwnerOrOperator;
    ThrowError err
  end
end

procedure IsOwnerOrOperatorOrApprovedSpender(token_id: Uint256, token_owner: ByStr20)
  is_owner = builtin eq _sender token_owner;
  is_approved_for_all <- exists operator_approvals[token_owner][_sender];
  some_token_approval <- token_approvals[token_id];
  is_approved = match some_token_approval with
    | None => False
    | Some approved_address => 
      builtin eq _sender approved_address
    end;
  is_approved_or_owner = orb is_owner is_approved;
  is_authorised = orb is_approved_or_owner is_approved_for_all;
  match is_authorised with
  | True =>
  | False =>
    err = CodeNotOwnerOrOperatorOrApprovedSpender;
    ThrowError err
  end
end

procedure IsApprovedSpenderOrOperator(token_id: Uint256, token_owner: ByStr20)
  some_token_approval <- token_approvals[token_id];
  is_approved = match some_token_approval with
    | None => False
    | Some approved_address => 
      builtin eq _sender approved_address
    end;
  is_operator <- exists operator_approvals[token_owner][_sender];
  is_authorised = orb is_approved is_operator;
  match is_authorised with
  | True =>
  | False =>
    err = CodeNotApprovedSpenderOrOperator;
    ThrowError err
  end
end

procedure UpdateTokenCount(operation: Operation, address: ByStr20)
  match operation with
  | Add =>
    some_to_count <- owned_token_count[address];
    new_to_count = 
      let current_count = get_bal some_to_count in
      builtin add current_count one;
    owned_token_count[address] := new_to_count
  | Sub =>
    some_from_count <- owned_token_count[address];
    new_from_count = 
      let current_count = get_bal some_from_count in
        let is_zero = builtin eq current_count zero in
          match is_zero with
          | True => zero
          | False => builtin sub current_count one
          end;
    owned_token_count[address] := new_from_count
  end
end

procedure EmitEventMinted(token_id: Uint256, owner: ByStr20)
  some_token_uri <- token_uris[token_id];

  match some_token_uri with
  | Some token_uri => 
    e = {
      _eventname: "MintSuccess";
      by: _sender;
      recipient: owner;
      token_id: token_id;
      token_uri: token_uri
    };
    event e
  | None =>
  end
end

procedure EventsMigrate(id: Uint256)
  some_token_owner <- token_owners[id];

  match some_token_owner with
  | Some token_owner => 
    EmitEventMinted id token_owner
  | None =>
  end
end

procedure Minting(input: Dragon)
  current_supply <- total_supply;
  current_count <- token_id_count;

  match input with
  | Dragon owner gen_image gen_battle =>
    new_supply = builtin add current_supply one;
    new_count = builtin add current_count one;

    tokens_owner_stage[owner][new_count] := zero32;
    token_stage[new_count] := zero32;
    token_owners[new_count] := owner;
    token_gen_battle[new_count] := gen_battle;
    token_gen_image[new_count] := gen_image;

    ChangeTokenURI new_count zero32;
    UpdateTokenCount add_operation owner;

    total_supply := new_supply;
    token_id_count := new_count;
    EmitEventMinted new_count owner
  end
end

procedure ChangeBattleGen(id_gen: Pair Uint256 Uint256)
  token_id = first_item id_gen;
  gen_battle = last_item id_gen;
  token_exist <- exists token_gen_battle[token_id];
  match token_exist with
  | False =>
    err = CodeNotFound;
    ThrowError err
  | True =>
    option_gen_battle <- token_gen_battle[token_id];
    current_gen_battle = option_uint256 zero option_gen_battle;
    token_gen_battle[token_id] := gen_battle;

    e = {
      _eventname: "GensChangedSuccess";
      token_id: token_id;
      old_gen_battle: current_gen_battle;
      new_gen_battle: gen_battle
    };
    event e
  end
end

(* Interface transitions *)

transition UpStage(token_id: Uint256)
  IsOwnerOrOperatorOrApprovedSpender token_id _sender;

  (* Check if token exists *)
  max_stage_of_token <- max_stage;
  some_owner <- token_owners[token_id];
  token_owner = option_address zero_address some_owner;
  some_token_stage <- tokens_owner_stage[token_owner][token_id];
  match some_token_stage with
    | Some stage => 
      one32 = Uint32 1;
      next_stage = builtin add stage one32;
      is_max = builtin lt max_stage_of_token next_stage;

      match is_max with
        | True =>
          err = CodeStageError;
          ThrowError err
        | False =>
          tokens_owner_stage[_sender][token_id] := next_stage;
          token_stage[token_id] := next_stage;

          ChangeTokenURI token_id next_stage;

          e = {
            _eventname: "TokenStageUpgrade";
            token_id: token_id;
            old_stage: stage;
            next_stage: next_stage
          };
          event e
      end
    | None =>
      err = CodeNotFound;
      ThrowError err
  end
end

transition ChangeCloud(new_cloud: String)
  IsContractOwner;

  cloud := new_cloud;

  e = {
    _eventname: "ChangedCloudURL";
    cloud: new_cloud
  };
  event e
end

transition ChangeImgFormat(new_format: String)
  IsContractOwner;

  format_img := new_format;

  e = {
    _eventname: "ChangeImageFormat";
    format_img: new_format
  };
  event e
end

transition ChangeBattleGens(id_gen_list: List (Pair Uint256 Uint256))
  IsMinter _sender;

  forall id_gen_list ChangeBattleGen
end

transition ConfigureStage(value: Uint32)
  IsContractOwner;

  stage <- max_stage;
  max_stage := value;
  e = {
    _eventname: "MaxStageChanged";
    old: stage;
    new: value
  };
  event e
end

transition ConfigureMinter(minter: ByStr20)
  IsContractOwner;
  some_minter <- minters[minter];
  match some_minter with
  | Some Dummy => 
    (* Remove minter *)
    delete minters[minter];
    e = {
      _eventname: "RemovedMinterSuccess";
      minter: minter
    };
    event e
  | None =>
    (* Add minter *)
    minters[minter] := verdad;
    e = {
      _eventname: "AddMinterSuccess";
      minter: minter
    };
    event e
  end
end

transition Mint(to: ByStr20, toekn_gens: Pair Uint256 Uint256)
  IsMinter _sender;
  
  tmp_fun = build_dragon to toekn_gens;

  Minting tmp_fun;

  msg_to_recipient = {
    _tag : "RecipientAcceptMint";
    _recipient : to;
    _amount : Uint128 0
  };
  msgs = one_msg msg_to_recipient;
  send msgs
end

transition BatchMint(to: ByStr20, gens_token_list: List (Pair Uint256 Uint256))
  IsMinter _sender;

  tmp_fun = build_dragon to;
  input_list = pair_token_gens_list tmp_fun gens_token_list;
  forall input_list Minting
end

transition Burn(token_id: Uint256)
  (* Check if token exists *)
  some_token_owner <- token_owners[token_id];
  match some_token_owner with
  | None =>
    err = CodeNotFound;
    ThrowError err
  | Some token_owner =>
    IsOwnerOrOperatorOrApprovedSpender token_id token_owner;
    (* Destroy existing token *)
    delete token_owners[token_id];
    delete token_approvals[token_id];
    delete token_uris[token_id];
    delete token_gen_battle[token_id];
    delete token_gen_image[token_id];
    delete tokens_owner_stage[token_owner][token_id];
    delete token_stage[token_id];
    (* Deduct from owned_token_count *)
    UpdateTokenCount sub_operation token_owner;
    (* Deduct from total_supply *)
    current_supply <- total_supply;
    new_supply = builtin sub current_supply one;
    total_supply := new_supply;
    e = {
      _eventname: "BurnSuccess";
      initiator: _sender;
      burn_address: token_owner;
      token_id: token_id
    };
    event e;
    msg_to_sender = {
      _tag: "BurnCallBack";
      _recipient: _sender;
      _amount: Uint128 0;
      initiator: _sender;
      burn_address: token_owner;
      token_id: token_id
    };
    msgs = one_msg msg_to_sender;
    send msgs
  end
end

transition SetApprove(to: ByStr20, token_id: Uint256)
  some_token_owner <- token_owners[token_id];
  match some_token_owner with
  | None =>
    err = CodeNotFound;
    ThrowError err
  | Some token_owner =>
    IsOwnerOrOperator token_owner;
    is_approved <- exists token_approvals[token_id];
    match is_approved with
    | True =>
      (* Remove approved_spender *)
      delete token_approvals[token_id];
      e = {
        _eventname: "RemoveApprovalSuccess";
        initiator: _sender;
        removed_spender: to;
        token_id: token_id
      };
      event e;
      msg_to_sender = {
        _tag: "RemoveApprovalSuccessCallBack";
        _recipient: _sender;
        _amount: Uint128 0; 
        removed_spender: to;
        token_id: token_id
      };
      msgs = one_msg msg_to_sender;
      send msgs
    | False =>
      (* Add approved_spender *)
      token_approvals[token_id] := to;
      e = {
        _eventname: "AddApprovalSuccess";
        initiator: _sender;
        approved_spender: to;
        token_id: token_id
      };
      event e;
      msg_to_sender = {
        _tag: "AddApprovalSuccessCallBack";
        _recipient: _sender;
        _amount: Uint128 0; 
        approved_spender: to;
        token_id: token_id
      };
      msgs = one_msg msg_to_sender;
      send msgs
    end
  end
end

transition SetApprovalForAll(to: ByStr20)
  IsSelf to _sender;
  is_operator <- exists operator_approvals[_sender][to];
  match is_operator with
  | False =>
    (* Add operator *)
    operator_approvals[_sender][to] := verdad;
    e = {
      _eventname: "AddApprovalForAllSuccess";
      initiator: _sender;
      operator: to
    };
    event e
  | True =>
    (* Remove operator *)
    delete operator_approvals[_sender][to];
    e = {
      _eventname: "RemoveApprovalForAllSuccess";
      initiator: _sender;
      operator: to
    };
    event e
  end;
  new_status = negb is_operator;
  msg_to_sender = {
    _tag: "SetApprovalForAllSuccessCallBack";
    _recipient: _sender;
    _amount: Uint128 0; 
    operator: to;
    status: new_status
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

transition Transfer(to: ByStr20, token_id: Uint256)
  IsSelf to _sender;
  IsTokenOwner token_id _sender;

  owner_stage <- tokens_owner_stage[_sender][token_id];

  match owner_stage with
  | None =>
    (* Token does not exists, return error code *)
    err = CodeNotFound;
    ThrowError err
  | Some stage =>
    (* Change token_owner for that token_id *)
    token_owners[token_id] := to;
    (* Delete tokenApproval entry for that token_id *)
    delete token_approvals[token_id];
    (* Remove old owner stage *)
    delete tokens_owner_stage[_sender][token_id];
    (* Set new owner stage. *)
    tokens_owner_stage[to][token_id] := stage;
    (* Subtract one from previous token owner count *)
    UpdateTokenCount sub_operation _sender;
    (* Add one to the new token owner count *)
    UpdateTokenCount add_operation to;
    e = {
      _eventname: "TransferSuccess";
      from: _sender;
      recipient: to;
      token_id: token_id
    };
    event e;
    msg_to_recipient = {
      _tag: "RecipientAcceptTransfer";
      _recipient: to;
      _amount: Uint128 0; 
      from: _sender;
      recipient: to;
      token_id: token_id
    };
    msg_to_sender = {
      _tag: "TransferSuccessCallBack";
      _recipient: _sender;
      _amount: Uint128 0; 
      from: _sender;
      recipient: to;
      token_id: token_id
    };
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
  end
end

transition TransferFrom(to: ByStr20, token_id: Uint256)
  some_token_owner <- token_owners[token_id];
  match some_token_owner with
  | None =>
    err = CodeNotFound;
    ThrowError err
  | Some token_owner =>
    owner_stage <- tokens_owner_stage[token_owner][token_id];
    match owner_stage with
      | None =>
        (* Token does not exists, return error code *)
        err = CodeNotFound;
        ThrowError err
      | Some stage =>
        IsSelf to token_owner;
        IsApprovedSpenderOrOperator token_id token_owner;
        (* Change token_owner for that token_id *)
        token_owners[token_id] := to;
        (* Delete tokenApproval entry for that token_id *)
        delete token_approvals[token_id];
        (* Remove stage of tokensOwner *)
        delete tokens_owner_stage[token_owner][token_id];
        (* Subtract one from previous token owner count *)
        UpdateTokenCount sub_operation token_owner;
        (* Add one to the new token owner count *)
        UpdateTokenCount add_operation to;
        tokens_owner_stage[to][token_id] := stage;
        e = {
          _eventname: "TransferFromSuccess";
          from: token_owner;
          recipient: to;
          token_id: token_id
        };
        event e;
        msg_to_recipient = {
          _tag: "RecipientAcceptTransferFrom";
          _recipient: to;
          _amount: Uint128 0; 
          from: token_owner;
          recipient: to;
          token_id: token_id
        };
        msg_to_sender = {
          _tag: "TransferFromSuccessCallBack";
          _recipient: _sender;
          _amount: Uint128 0; 
          from: token_owner;
          recipient: to;
          token_id: token_id
        };
        msgs = two_msgs msg_to_recipient msg_to_sender;
        send msgs
    end
  end
end

transition Migrate()
  migrator <- migrate_option;

  match migrator with
  | Battle =>
    old_token_gen_battle <-& old.token_gen_battle;
    token_gen_battle := old_token_gen_battle;
    migrate_option := op_image
  | Image =>
    old_token_gen_image <-& old.token_gen_image;
    token_gen_image := old_token_gen_image;
    migrate_option := op_counters
  | Counters =>
    old_token_id_count <-& old.token_id_count;
    old_total_supply <-& old.total_supply;
    token_id_count := old_token_id_count;
    total_supply := old_total_supply;
    migrate_option := op_token_stage
  | TokenStage =>
    old_token_stage <-& old.token_stage;
    token_stage := old_token_stage;
    migrate_option := op_tokens_owner_stage
  | TokensOwnerStage =>
    old_tokens_owner_stage <-& old.tokens_owner_stage;
    tokens_owner_stage := old_tokens_owner_stage;
    migrate_option := op_token_owners
  | TokenOwners =>
    old_token_owners <-& old.token_owners;
    token_owners := old_token_owners;
    migrate_option := op_owned_token_count
  | OwnedTokenCount =>
    old_owned_token_count <-& old.owned_token_count;
    owned_token_count := old_owned_token_count;
    migrate_option := op_token_uris
  | TokenUris =>
    old_token_uris <-& old.token_uris;
    token_uris := old_token_uris;
    migrate_option := op_done
  | Done =>
  end
end

transition MigrateEvents(ids: List Uint256)
  IsContractOwner;
  migrator <- migrate_option;

  match migrator with
  | Battle =>
  | Image =>
  | Counters =>
  | TokenStage =>
  | TokensOwnerStage =>
  | TokenOwners =>
  | OwnedTokenCount =>
  | TokenUris =>
  | Done =>
    forall ids EventsMigrate
  end
end
