scilla_version 0

import PairUtils ListUtils
(***************************************************)
(*               Associated library                *)
(***************************************************)
library CrowdSaleDZT

let one128 = Uint128 1
let zero128 = Uint128 0
let zero = Uint32 0
let one_hundred = Uint128 100
let tt = True
let zero_address = 0x0000000000000000000000000000000000000000

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let get_percent =
  fun (some_percent: Option Uint128) =>
  fun (default_percent: Uint128) =>
  match some_percent with
    | Some percent => percent
    | None => default_percent
  end

let iota =
  fun (m : Uint32) =>
  fun (n : Uint32) =>
  fun (value : ByStr20) =>
    let m_lt_n = builtin lt m n in
    match m_lt_n with
    | True =>
        let delta = builtin sub n m in
        let delta_nat = builtin to_nat delta in
        let nil = Nil {ByStr20} in
        let acc_init = Pair {(List ByStr20) Uint32} nil n in
        let one = Uint32 1 in
        let step = fun (xs_n : Pair (List ByStr20) Uint32) => fun (ignore : Nat) =>
          match xs_n with
          | Pair xs n =>
              let new_n = builtin sub n one in
              let new_xs = Cons {ByStr20} value xs in
              Pair {(List ByStr20) Uint32} new_xs new_n
          end in
        let fold = @nat_fold (Pair (List ByStr20) Uint32) in
        let xs_m = fold step acc_init delta_nat in
        match xs_m with
        | Pair xs m => xs
        end
    | False => Nil {ByStr20}
    end

(* Error events *)
type Error =
  | CodeInsufficientAmount
  | CodeWrongListLength
  | CodeAlreadyHadDragon
  | CodeNotAuthorised
  | CodeNoPubKey
  | CodeVerificationFailed
  | CodeUint32Overflow

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeInsufficientAmount => Int32 -1
      | CodeWrongListLength    => Int32 -2
      | CodeAlreadyHadDragon   => Int32 -3
      | CodeNotAuthorised      => Int32 -4
      | CodeNoPubKey           => Int32 -5
      | CodeVerificationFailed => Int32 -6
      | CodeUint32Overflow     => Int32 -7
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract CrowdSaleDZT

(*  Parameters *)
(contract_owner: ByStr20,
 main_dzt : ByStr20)

(* Mutable fields *)
field incrementer: Uint128 = Uint128 0
field current_price: Uint128 = Uint128 1000000000000
field is_dragon_owner: Map ByStr20 Bool = Emp ByStr20 Bool
field start_referral_percent: Uint128 = Uint128 10
field max_referral_percent: Uint128 = Uint128 50
field referrals: Map ByStr20 Uint128 = Emp ByStr20 Uint128

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner()
  is_owner = builtin eq contract_owner _sender;

  match is_owner with
  | True =>
  | False =>
    err = CodeNotAuthorised;
    ThrowError err
  end
end

procedure sendReferral(refAddr: ByStr20, amount: Uint128)
  is_ref = builtin eq zero_address refAddr;

  match is_ref with
  | True =>
  | False =>
    referral_percent <- start_referral_percent;
    max_percent <- max_referral_percent;
    some_refferal_percent <- referrals[refAddr];

    percent = get_percent  some_refferal_percent referral_percent;

    is_max = builtin eq percent max_percent;

    match is_max with
      | False =>
        new_referrals_percent = builtin add percent one128;
        referrals[refAddr] := new_referrals_percent
      | True =>
    end;

    reward = builtin mul amount percent;
    reward = builtin div reward one_hundred;

    msg = {
      _tag: "";
      _recipient: refAddr;
      _amount: reward
    };
    msgs = one_msg msg;
    send msgs
  end
end

procedure MintDragons(onwers: List ByStr20)
  mint_call = {
    _tag: "BatchMint";
    _recipient: main_dzt;
    _amount: Uint128 0;
    onwers: onwers
  };
  msgs = one_msg mint_call;
  send msgs
end

transition setPrice(price: Uint128)
  IsOwner;

  current_price := price;
  e = {
    _eventname: "PriceChangeSuccess";
    by: _sender
  };
  event e
end

transition setIncrementer(value: Uint128)
  IsOwner;

  incrementer := value;
  e = {
    _eventname: "IncrementerChangeSuccess";
    by: _sender
  };
  event e
end

transition Buy(refAddr: ByStr20)
  price <- current_price;
  inc <- incrementer;

  dragon_count128 = builtin div _amount price;
  dragon_count32 = builtin to_uint32 dragon_count128;

  match dragon_count32 with
  | Some count =>
    is_zero = builtin eq count zero;

    match is_zero with
    | False =>
      owner_list = iota zero count _sender;
      accept;

      MintDragons owner_list;

      addition = builtin mul inc dragon_count128;
      new_price = builtin add price addition;

      current_price := new_price;
      
      dragons_cost = builtin mul dragon_count128 price;
      change = builtin sub _amount dragons_cost;
      is_zero_change = builtin eq change zero128;

      sendReferral refAddr _amount;

      match is_zero_change with
      | False => 
        msg = {
          _tag: "";
          _recipient: _sender;
          _amount: change
        };
        msgs = one_msg msg;
        send msgs
      | True =>
      end
    | True =>
      err = CodeInsufficientAmount;
      ThrowError err
    end

  | None =>
    err = CodeUint32Overflow;
    ThrowError err
  end
end

transition ChangeStartReferralPercent(value: Uint128)
  IsOwner;

  e = {
    _eventname: "startReferralPercentChanged";
    by: _sender
  };
  event e;
  start_referral_percent := value
end

transition ReturnFund()
  IsOwner;
  bal <- _balance;

  e = {
    _eventname : "ReturnFundSuccessful";
    returned_amount: bal
  };
  event e;

  msg = {
    _tag: "";
    _recipient: contract_owner;
    _amount: bal
  };

  msgs = one_msg msg;
  send msgs
end

